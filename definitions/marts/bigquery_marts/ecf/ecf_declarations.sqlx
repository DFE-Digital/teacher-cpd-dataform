config {
    type: "table",
    bigquery: {
        partitionBy: "",
        clusterBy: ["cohort", "participant_course", "cpd_lead_provider_name","declaration_type"]
    },
    description: "This mart joins the latest induction record for a given ECF participant (found in the ecf_inductions_dedupe mart) with the relevant ecf declarations for that participant resulting in one row per declaration per participant. In order to determine the preferred declaration for each declaration type (if multiple records exist for the same declaration type) we've determined a preferred state_hierarchy:paid>payable>eligible>submitted>clawed_back>awaiting_clawback>voided ",
    columns: {
        induction_record_id: "ID of individual induction record",
        participant_course: "This is a shortened version of participant_type",
        cpd_delivery_partner_name: "The name of the Delivery Partner taken from the declaration record rather than the induction record.",
        statement_id: "The ID of the financial statement which the declaration belongs to.",
        statement_cohort: "The start_year of the cohort associated with the financial statement the declaration belongs to. This can differ to the participants cohort and is often used when assessing declaration level KPIs as these cannot change whereas a participant can move between academic cohorts.",
        mentor_completion_date: "The date a mentor completed training. When a declaration is submitted for a mentor the mentor_completion_date will equal the declaration_date. When a declaration is voided the completed date will be cleared. Completed dates for early roll-out mentors will be set to 19 April 2021 regardless of any completed declarations.",
        mentor_completion_reason: "The reason the mentor_completion_date field is filled. Possible values: completed_during_early_roll_out, completed_declaration_received, started_not_completed (if the training this declaration is for is deemed 'complete' but the overall ECF mentor training is not complete).",
        trn: {
            description: "TRN for the teacher this declaration related to training for",
            bigqueryPolicyTags: ["projects/ecf-bq/locations/europe-west2/taxonomies/6302091323314055162/policyTags/301313311867345339"]
        }
    }
}

WITH
  ecf_inductions_expanded AS (
  SELECT
    ecfid.*,
    ppl.induction_start_date,
    ppl.induction_completion_date,
    CASE
      WHEN participant_type LIKE 'ParticipantProfile::ECT' THEN 'ECT'
      WHEN participant_type LIKE 'ParticipantProfile::Mentor' THEN 'Mentor'
    ELSE
    NULL
  END
    AS participant_course
  FROM
    ${ref('ecf_inductions_dedupe')} AS ecfid
  LEFT JOIN
    ${ref('participant_profiles_latest_ecf1')} AS ppl
  ON
    ecfid.participant_profile_id = ppl.id
  WHERE
    participant_type IS NOT NULL),
  ecf_declarations_expanded AS (
  SELECT
    dec_ecf1.*,
    cpd_lead_providers.name AS cpd_lead_provider_name,
    delivery_partners.name AS delivery_partner_name,
    ${functions.stateToStateHierarchy('dec_ecf1.state')} AS state_hierarchy,
    ${functions.declarationTypeToDeclarationTypeHierarchy('declaration_type')} AS type_hierarchy,
    IFNULL(dec_ecf1.state IN ('paid', 'eligible', 'payable'), FALSE) AS funded_declaration,
    CASE
      WHEN course_identifier LIKE 'ecf-induction' THEN 'ECT'
      WHEN course_identifier LIKE 'ecf-mentor' THEN 'Mentor'
    ELSE
    NULL
  END
    AS participant_course,
  sli.statement_id,
  cohorts.start_year AS statement_cohort
  FROM
    ${ref(`participant_declarations_latest_ecf1`)} AS dec_ecf1
  LEFT JOIN
    ${ref(`cpd_lead_providers_latest_ecf1`)} AS cpd_lead_providers
  ON
    dec_ecf1.cpd_lead_provider_id=cpd_lead_providers.id
  LEFT JOIN
    ${ref(`delivery_partners_latest_ecf1`)} AS delivery_partners
  ON
    dec_ecf1.delivery_partner_id=delivery_partners.id
  LEFT JOIN
    ${ref('statement_line_items_latest_ecf1')} AS sli
  ON
    sli.participant_declaration_id = dec_ecf1.id
  LEFT JOIN
    ${ref('statements_latest_ecf1')} AS stm
  ON
    stm.id = sli.statement_id
  LEFT JOIN
    ${ref('cohorts_latest_ecf1')} AS cohorts
  ON
    cohorts.id = stm.cohort_id
  WHERE
    course_identifier LIKE 'ecf%')
SELECT
  e_ind.* EXCEPT(active),
  DATE(e_dec.created_at) AS declaration_created_at_date,
  e_dec.id as declaration_id,
  e_dec.declaration_type,
  e_dec.declaration_date,
  e_dec.state,
  e_dec.funded_declaration,
  e_dec.cpd_lead_provider_name,
  e_dec.delivery_partner_name AS cpd_delivery_partner_name,
  e_dec.statement_id,
  e_dec.statement_cohort
FROM
  ecf_inductions_expanded e_ind
LEFT JOIN
 ecf_declarations_expanded e_dec
ON
  e_ind.participant_profile_id=e_dec.participant_profile_id
  AND e_ind.participant_course=e_dec.participant_course
QUALIFY
  ROW_NUMBER() OVER (PARTITION BY e_ind.participant_profile_id, e_dec.course_identifier, e_dec.declaration_type ORDER BY e_dec.state_hierarchy DESC, e_dec.declaration_date desc) = 1
