config {
    type: "table",
    assertions: {
        uniqueKey: ["induction_record_id"]
    },
    bigquery: {
        partitionBy: "DATE(induction_record_created_at)",
        clusterBy: ["cohort", "participant_type", "induction_status", "training_status"]
    },
    description: "This mart shows the latest induction record for a given ECF participant by running the following logic to pull the relevant latest record from the ecf_inductions mart. Due to the possibility of one individual having both an ECT and Mentor profile, the induction records are split into ECTs and Mentors and then joined together using UNION. The methodlogy for ECTs and Mentors is the same: First, we keep only the records with completed induction_status if there any, and if no completed records for an individual then all active induction_status rcords if there are any, and if no active records for an individual then all non-active records. From this, we then select the records with the most recent start_date and then select the most recently created induction record from those (as it's possible for induction records to share the same start_date). Lead Provider and Delivery Partner information is added on at the end.",
    columns: {
        induction_record_id: "ID of individual induction record",
        external_id: "",
        participant_profile_id: "The table participant_declarations_latest needs to be joined to ecf_inductions using participant_profile_id. Deduplication of user_ids has turned some of them into “ghost” IDs but the participant_profile_id still links correctly. Participant profiles are automatically generated for ECTs/Mentors when induction tutors register the ECT/Mentor details. Meaning a participant_profile_id (and full participant_profile) should be available for each ECF participant with an induction record. ECF participants have one participant_profile for each type of participation (ECT or Mentor).",
        induction_programme_id: "ID of the induction programme specific to the school offering it.",
        induction_programme_type: "The induction programme the school offers (FIP / CIP / DIY) : potential values: full_induction_programme core_induction_programme, design_our_own, school_funded_fip.",
        school_name: "Name of the participant's school.",
        school_urn: "URN of the participant's school.",
        schedule_identifier: "This indicates which sub-cohort or tranche the participant commenced training within an annual cohort. For ECF, the schedule identifier also indicates if a participant is following a non-standard training route at any point (e.g. extended or reduced).",
        mentor_id: "The participant_profile_id of an ECT's mentor. This field is always NULL for mentors.",
        appropriate_body_id: "The ID of the appropriate body associated with the school.",
        appropriate_body_name: "The name of the appropriate body associated with the school.",
        start_date: "Start date for this induction record",
        end_date: "End date for this induction record. This is not the completion date for a participant's full induction.",
        induction_status: "A status value used to manage the state of an induction record. It can indicate that a record is the active record or that something has changed and the record is not the active record (or will not be in the future). Potential values: active, changed, leaving, withdrawn ",
        training_status: "This is managed on the lead provider side and indicates whether the participant is being trained by a provider or not. Potential Values: active, deferred, withdrawn",
        school_transfer: "TRUE if a participant has transferred out of/in to the school in that induction record.",
        created_at: "When this induction record was generated.",
        updated_at: "When this induction record was updated.",
        completion_date: "The date an ECT completed their induction. This field is always NULL for mentors",
        cohort_id: "The ID of the participant's cohort.",
        user_id: "This comes from the teacher profile associated with the participant profile.",
        participant_type: "Either ECT or Mentor",
        induction_record_created_at: "When this induction record was generated.",
        partnership_id: "ID for the Lead Provider-School partnership for a given cohort.",
        TRN: "This comes from a participant's teacher profile.",
        cohort: "The cohort/academic year corresponding to when the participant started their course. Possible fields: 2021 onwards.",
        school_id: "ID of the participant's school.",
        high_pupil_premium: "This indicates whether the uplift payment for X is applicable to this participant's started declaration",
        sparsity_incentive: "This indicates whether the uplift payment for X is applicable to this participant's started declaration",
        core_induction_programme_id: "If a school offers CIP, this will be filled with the ID of their CIP programme.",
        core_induction_materials_provider: "If a school offers CIP, this shows which Lead Provider they are getting their CIP materials from.",
        mentor_completion_date: "The date a mentor completed training.",
        mentor_completion_reason: "The reason the mentor_completion_date field is filled.Possible values: completed_during_early_roll_out, completed_declaration_received.",
        active: "2 if a participant has a completed induction_status, 1 if it is active, 0 otherwise.",
        lead_provider_name: "Name of the Lead Provider partnered with the participant's school. If the partnership is challenged, the field will say 'No lead provider'.",
        delivery_partner_name: "Name of the Delivery Partner partnered with the participant's school. If the partnership is challenged, the field will say 'No delivery partner'."
    }
}

  /*
  Due to the possibility of one individual having both an ECT and Mentor profile, the induction records are split into ECTs and Mentors and then joined together using UNION. The methodlogy for ECTs and Mentors is the same:
  First, we keep only the records with completed induction_status if there any, and if no completed records for an individual then all active induction_status rcords if there are any, and if no active records for an individual then all non-active records.
  This is done in the max_active_induction CTE.

  From this, we then select the records with the most recent start_date.
  This is done in the induction_start CTE.

  From induction_start, we then select the most recently created induction record as it's possible for induction records to share the same start_date.
  This is done in the induction_created CTE.

  This is then joined together in deduped_ecf_inductions to get the most recent induction record, with Lead Provider and Delivery Partner information being added on at the end.
  */
WITH
  max_active_induction AS (
  SELECT
    DISTINCT ei.*
  FROM (
    SELECT
      user_id,
      MAX(active) AS max_active
    FROM (
      SELECT
        *,
        CASE
          WHEN induction_status = 'completed' THEN 2
          WHEN induction_status = 'active' THEN 1
        ELSE
        0
      END
        AS active
      FROM
        `ecf-bq.dataform.ecf_inductions` ei ) x
    WHERE
      participant_type = 'ParticipantProfile::ECT'
    GROUP BY
      user_id ) a
  LEFT JOIN (
    SELECT
      *,
      CASE
        WHEN induction_status = 'completed' THEN 2
        WHEN induction_status = 'active' THEN 1
      ELSE
      0
    END
      AS active
    FROM
      `ecf-bq.dataform.ecf_inductions`
    WHERE
      participant_type = 'ParticipantProfile::ECT') ei
  ON
    a.user_id=ei.user_id
    AND a.max_active=ei.active
  ORDER BY
    user_id),
  induction_start AS (
  SELECT
    mai.*
  FROM (
    SELECT
      user_id,
      MAX(start_date) AS latest_start
    FROM
      max_active_induction
    GROUP BY
      user_id) a
  LEFT JOIN
    max_active_induction mai
  ON
    a.user_id = mai.user_id
    AND a.latest_start = mai.start_date),
  induction_created AS (
  SELECT
    user_id,
    MAX(created_at) AS latest_created
  FROM
    induction_start
  GROUP BY
    user_id),
  deduped_ecf_inductions AS (
  SELECT
    lsd.*
  FROM
    induction_created a
  LEFT JOIN
    induction_start lsd
  ON
    a.user_id = lsd.user_id
    AND a.latest_created = lsd.created_at)
SELECT
  DISTINCT *
FROM
  deduped_ecf_inductions 
UNION ALL (
  WITH
    max_active_induction AS (
    SELECT
      DISTINCT ei.*
    FROM (
      SELECT
        user_id,
        MAX(active) AS max_active
      FROM (
        SELECT
          *,
          CASE
            WHEN induction_status = 'completed' THEN 2
            WHEN induction_status = 'active' THEN 1
          ELSE
          0
        END
          AS active
        FROM
          `ecf-bq.dataform.ecf_inductions` ei ) x
      WHERE
        participant_type = 'ParticipantProfile::Mentor'
      GROUP BY
        user_id ) a
    LEFT JOIN (
      SELECT
        *,
        CASE
          WHEN induction_status = 'completed' THEN 2
          WHEN induction_status = 'active' THEN 1
        ELSE
        0
      END
        AS active
      FROM
        `ecf-bq.dataform.ecf_inductions`
      WHERE
        participant_type = 'ParticipantProfile::Mentor') ei
    ON
      a.user_id=ei.user_id
      AND a.max_active=ei.active
    ORDER BY
      user_id),
    induction_start AS (
    SELECT
      mai.*
    FROM (
      SELECT
        user_id,
        MAX(start_date) AS latest_start
      FROM
        max_active_induction
      GROUP BY
        user_id) a
    LEFT JOIN
      max_active_induction mai
    ON
      a.user_id = mai.user_id
      AND a.latest_start = mai.start_date),
    induction_created AS (
    SELECT
      user_id,
      MAX(created_at) AS latest_created
    FROM
      induction_start
    GROUP BY
      user_id),
    deduped_ecf_inductions AS (
    SELECT
      lsd.*
    FROM
      induction_created a
    LEFT JOIN
      induction_start lsd
    ON
      a.user_id = lsd.user_id
      AND a.latest_created = lsd.created_at)
  SELECT
    DISTINCT *
  FROM
    deduped_ecf_inductions)
