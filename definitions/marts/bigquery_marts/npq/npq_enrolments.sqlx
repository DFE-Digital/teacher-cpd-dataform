config {
    type: "table",
    assertions: {
        uniqueKey: ["application_id"],
        /* Check for new course identifiers where the mapping used to calculate course_usual_length_months below has not been updated. */
        /* To fix this assertion failure, find out the usual number of months taken for courses with the new course identifier */
        /* and add it to the CASE statement below. */
        rowConditions: ["course_usual_length_months IS NOT NULL OR course_identifier IS NULL"]
    },
    bigquery: {
        partitionBy: "DATE(application_created_at)",
        clusterBy: ["cohort", "provider_name", "course_name", "application_status"]
    },
    description: "This table is designed around NPQ Applications with each application constituting a single record. Participant details have been joined into the application record. Since user profiles are only generated when an application is accepted by a lead provider, gaps in key fields (like schedule) can be the result of a pending application. We also join in declarations to create a 'golden thread' of NPQ participation for each application, splitting out declarations across the different declaration types. In the rare cases that multiple declarations exist for the same type of declaration, we've determined a preferred state_hierarchy:paid>payable>eligible>submitted>clawed_back>awaiting_clawback>voided. For the latest declaration we've also incorporated a type hierarchy, prioritising declarations from further along in the golden thread.",
    columns: {
        application_id: "ID of each unique application in the new NPQ Service. Declarations are joined to the application using this id",
        application_ecf_id: "ECF ID of each unique application. This is the GUID version which can be found in participant_declarations_latest_cpd if created before 28/11/2024.",
        application_trn: {
            description: "This is either the application_trn as per the NPQ Application record in the ECF Service prior to separation, or the first TRN associated with the user profile at the time the application was created. The user profile is created when the applicant first applies and the TRN field is populated with the value provided before any verification takes place. We use the valid record on the users table to determine the TRN provided at the time of application as this is overwritten in the user profile with the verified TRN if it is different. If a user re-applies after their user profile is created the service does not record their entered TRN again but instead uses the one on file.",
            bigqueryPolicyTags: ["projects/ecf-bq/locations/europe-west2/taxonomies/6302091323314055162/policyTags/301313311867345339"]
        },
        trn_verified: {
            description: "This is the TRN sourced from the User Profile",
            bigqueryPolicyTags: ["projects/ecf-bq/locations/europe-west2/taxonomies/6302091323314055162/policyTags/301313311867345339"]
        },
        trn_auto_verified: "This refers to whether the TRN provided in the application process was verified.",
        application_created_at: "Refers to the date the application was created.",
        headteacher_status: "Indicates whether the participant is a headteacher in their first five years.",
        eligible_for_funding: "Indicates whether the applicant is eligible for funding for their course.",
        funding_choice: "If a participant is not eligible for funding, this indicates the source of the funding for their NPQ. Possible fields: Another, School, Self, Trust.",
        school_urn: "The unique reference number of the participant's school. Private childcare participants do not need a URN.",
        school_name: "Name of participant's school.",
        high_pupil_premium: "This indicates whether the uplift payment for high pupil premium is applicable to this participant's started declaration. Pupil premium funding is allocated to eligible schools based on the number of 1) pupils who are recorded as eligible for free school meals, or have been recorded as eligible in the past 6 years (referred to as Ever 6 FSM); 2) children previously looked after by a local authority or other state care, including children adopted from state care or equivalent from outside England and Wales.",
        la_name: "Name of local authority.",
        school_postcode: "Postcode of participant's school",
        course_name: "Text name of NPQ course.",
        provider_name: "Name of lead provider.",
        user_id: "The ID of the user profile on the application used to join with users from the new NPQ Service.",
        ecf_user_id: "This comes from the user profile associated with the application. This or trn_verified is the preferred representation of a single user as it transcends programme. ecf_user_id is not PII. This field can be used to join on Teacher Profiles as long as it was created prior to 28/11/2024.",
        targeted_delivery_funding_eligibility: "Indicates whether this NPQ participant is eligible for targeted delivery uplift payment. This following establishments are eligible: 1)state-funded secondary schools and state-funded 16 to 19 educational settings with 1 to 600 pupils will receive a grant payment of £200; 2) state-funded primary schools with more than 150 pupils will receive a grant payment of £200; 3) state-funded primary schools with 1 to 150 pupils will receive a grant payment of £800.",
        number_of_pupils: "Pupil count based on GIAS data at time of registration.",
        works_in_childcare: "Indicates whether the participant works in childcare.",
        kind_of_nursery: "If the participant works in a nursery, indicates which type of nursery. Possible fields: Local authority maintained nursery, Preschool class as part of school, Private nursery, Another Early Years Setting.",
        private_childcare_provider_urn: "The unique reference number given to the employer of participants who work in private childcare.",
        funding_eligiblity_status_code: "Indicates the funding status of a participant.",
        cohort: "The cohort/academic year corresponding to when the participant started their course. Possible fields: 2021 onwards.",
        cohort_number: "A policy orientated cohort identifier to indicate which cohort a DfE funded applicants lies, this field is calculated through a combination of cohort years and in the years 2021-2023 which 'schedule_identifier' they will be a part of. Cohorts 8 and 9 in 2025 are differentiated between the closing date of the spring application window and opening date of the autumn applciation window.",
        course_identifier: "Shorthand of NPQ course. This comes from the participant's latest declaration.",
        course_usual_length_months: "The length of the NPQ course, in months (an integer). Determined from course_identifier.",
        latest_state: "State of participant's latest declaration. Latest declaration is determined using the field declaration_date as this is the date when the evidence for the declaration is provided.",
        latest_declaration_type: "Type of participant's latest declaration.",
        latest_lead_provider_name: "Name of Lead Provider associated with participant's latest declaration.",
        latest_declaration_date: "Date evidence was submitted for participant's latest declaration.",
        latest_declaration_updated_at: "Date participant's latest declaration was updated",
        latest_declaration_delivery_partner_id: "The ID of the delivery partner that submitted the latest declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        latest_declaration_delivery_partner_name: "The name of the delivery partner that submitted the latest declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        application_status: "Indicates whether the application has been approved by the lead provider.Possible fields: Pending, Accepted, Rejected.",
        updated_at: "Refers to the latest updated date for the application record.",
        employer_name: "Shows the entered employer name of non-school users. Text field.",
        employment_role: "Shows the employment role of non-school users. Text field.",
        employment_type: "For non-school users, shows the type of institution they are employed in. Possible fields: Local authority supply teachers, Local authority virtual school, Young offender institute, Hospital school, Other.",
        training_status: "Pulled from participant profile which is created when application is accepted by lead provider.",
        schedule_identifier: "This indicates which sub-cohort or tranche the participant commenced training within an annual cohort. For NPQ, the schedule identifier also distinguishes between the leadership and specialist NPQ types. Pulled from participant profile which is created when application is accepted by lead provider.",
        started_declaration_id: "ID of the participant's started declaration.",
        started_declaration_state: "State of the participant's started declaration.",
        started_declaration_date: "Date evidence was submitted for participant's started declaration.",
        started_declaration_delivery_partner_id: "The ID of the delivery partner that submitted the participant's started declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        started_declaration_delivery_partner_name: "The name of the delivery partner that submitted the participant's started declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        funded_start_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        retained1_declaration_id: "ID of the participant's retained-1 declaration.",
        retained1_declaration_state: "State of the participant's retained-1 declaration.",
        retained1_declaration_date: "Date evidence was submitted for participant's retained-1 declaration.",
        retained1_declaration_delivery_partner_id: "The ID of the delivery partner that submitted the participant's retained-1 declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        retained1_declaration_delivery_partner_name: "The name of the delivery partner that submitted the participant's retained-1 declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        funded_retained1_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        retained2_declaration_id: "ID of the participant's retained-2 declaration.",
        retained2_declaration_state: "State of the participant's retained-2 declaration.",
        retained2_declaration_date: "Date evidence was submitted for participant's retained-2 declaration.",
        retained2_declaration_delivery_partner_id: "The ID of the delivery partner that submitted the participant's retained-2 declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        retained2_declaration_delivery_partner_name: "The name of the delivery partner that submitted the participant's retained-2 declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        funded_retained2_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        completed_declaration_id: "ID of the participant's completed declaration.",
        completed_declaration_state: "State of the participant's completed declaration.",
        completed_declaration_delivery_partner_id: "The ID of the delivery partner that submitted the participant's completed declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        completed_declaration_delivery_partner_name: "The name of the delivery partner that submitted the participant's completed declaration, for declarations from the 2024 cohort onwards (excluding international applications); some providers may also include this for new declarations from earlier cohorts.",
        funded_completed_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        completed_declaration_date: "Date evidence was submitted for participant's completed declaration.",
        latest_outcome_state: "State of participant's latest outcome for their NPQ. Outcomes are joined in on the participant's completed declaration. Possible fields: Passed, Failed, Voided.",
        latest_outcome_date: "Date of completion for the participant's latest outcome.",
        assumed_no_longer_live_date: "Date after which we can assume this participant's NPQ finished/will finish. The same as latest_outcome_date if the NPQ has an outcome. If not this is X months after the started_declaration_date, where X is the course_usual_length_months. Used for KPI baseline calculations.",
        count_of_fails: "Counts the number of Failed outcome states for a participant.",
        cohort_id: "ID of cohort.",
        lead_provider_id: "ID of Lead Provider.",
        primary_establishment: "Records whether the user's establishment at time of registration was a primary establishment or not. Based on GIAS data.",
        school_ukprn: "UKPRN of the participant's establishment ",
        teacher_catchment: "The catchment zone the participant works in within the UK i.e. England, Wales, Northern Ireland etc. International applicants recorded as 'another'.",
        teacher_catchment_country: "The country the participant works in.",
        teacher_catchment_iso_country_code: "The ISO code for the country the participant works in.",
        tsf_primary_eligibility: "TRUE/FALSE for whether a school is eligible for TSF (£200) owing to it being a primary establishment.",
        tsf_primary_plus_eligibility: "TRUE/ FALSE for whether a school is eligible for the base £200 as well as the additional £600 based on whether they are a primary school and have fewer than 150 pupils. Pupil count based on GIAS data at time of registration.",
        works_in_nursery: "Indicates whether the participant works in a nursery.",
        works_in_school: "Indicates whether the participant works in a school. ",
        funded_place: "This indicates if the accepted NPQ application is being funded by the DfE as one of the capped funded places. Being eligible for funding does not guarantee the application will be funded.",
        senco_in_role: "Answer selected for question 'Are you a SENCO?' during the application stage. Possible results are; yes, no but I plan to be, no and I do not plan to be.",
        senco_start_date: "Provided at time of application and only answered if 'yes' is selected for Are you a SENCO. Format is MM/YYYY stored as a string."
    }
}

  -- Gather the TRNs associated with a user profile per user_id and the dates between which this was valid. This value will be used as the application_trn before any verification checks have taken place.
WITH
  user_trns AS (
  SELECT
    id AS user_id,
    trn,
    valid_from,
    valid_to
  FROM
    ${ref('users_version_npq')}
  WHERE
    trn IS NOT NULL
  QUALIFY
    ROW_NUMBER() OVER(PARTITION BY id ORDER BY valid_from ASC) = 1 ),
  -- NPQ Application records in the ECF Service Data prior to separation.
  --- Used to obtain application_trn associated with the application prior to separation where this information needs to calculated differently.
  previous_application_trns AS (
SELECT
  id AS application_ecf_id,
  teacher_reference_number AS application_trn
FROM
  ${ref('npq_applications_archive')} ),
  -- Gather all NPQ applications in their latest state and join on the supplimentary information
  --- We join on User, School, Course, Cohort, Lead Provider, Private Childcare Providers and GIAS information within this CTE to be used in the final output.
  npq_app AS (
SELECT
  app.id AS application_id,
  app.ecf_id AS application_ecf_id,
  COALESCE(pr_trn.application_trn, CAST(user_trns.trn AS STRING)) AS application_trn,
  CASE
    WHEN users.trn_verified = TRUE THEN users.trn
    ELSE NULL
END
  AS trn_verified,
  users.trn_auto_verified,
  users.id AS user_id,
  users.ecf_id AS ecf_user_id,
  app.created_at AS application_created_at,
  app.updated_at,
  app.cohort_id,
  cohort.start_year AS cohort,
    CASE
      WHEN cohort.start_year = 2021 AND sched.identifier IN ('npq-aso-november', 'npq-aso-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 1'
      WHEN cohort.start_year = 2021
    AND sched.identifier IN ('npq-aso-june',
      'npq-ehco-june',
      'npq-leadership-spring',
      'npq-specialist-spring') THEN 'Cohort 2'
      WHEN cohort.start_year = 2022 AND sched.identifier IN ('npq-ehco-november', 'npq-ehco-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 3'
      WHEN cohort.start_year = 2022
    AND sched.identifier IN ('npq-ehco-march',
      'npq-ehco-june',
      'npq-leadership-spring',
      'npq-specialist-spring') THEN 'Cohort 4'
      WHEN cohort.start_year = 2023 AND sched.identifier IN ('npq-ehco-november', 'npq-ehco-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 5'
      WHEN cohort.start_year = 2023
    AND sched.identifier IN ('npq-ehco-march',
      'npq-ehco-june',
      'npq-leadership-spring',
      'npq-specialist-spring') THEN 'Cohort 6'
      WHEN cohort.start_year = 2024 THEN 'Cohort 7'
      WHEN cohort.start_year = 2025 and app.created_at < '2025-09-08' THEN 'Cohort 8'
      WHEN cohort.start_year = 2025 and app.created_at >= '2025-09-08' THEN 'Cohort 9'
      ELSE 'n/a'
  END
    AS cohort_number,
  courses.identifier AS course_identifier,
  CASE courses.identifier
    WHEN "npq-additional-support-offer" THEN 12
    WHEN "npq-early-headship-coaching-offer" THEN 12
    WHEN "npq-early-years-leadership" THEN 18
    WHEN "npq-executive-leadership" THEN 18
    WHEN "npq-headship" THEN 18
    WHEN "npq-leading-behaviour-culture" THEN 12
    WHEN "npq-leading-literacy" THEN 12
    WHEN "npq-leading-primary-mathematics" THEN 12
    WHEN "npq-leading-teaching" THEN 12
    WHEN "npq-leading-teaching-development" THEN 12
    WHEN "npq-senco" THEN 18
    WHEN "npq-senior-leadership" THEN 18
  END AS course_usual_length_months,
  courses.name AS course_name,
  CASE
    WHEN courses.name = 'Additional Support Offer for new headteachers' THEN 'EHCO'
    WHEN courses.name = 'The Early Headship Coaching Offer' THEN 'EHCO'
    WHEN REGEXP_CONTAINS(courses.name, r'\(.*\)') THEN REGEXP_EXTRACT(courses.name, r'\((.*?)\)')
    ELSE courses.name
END
  AS short_course_name,
  app.lead_provider_id,
  CASE
    WHEN lp.name = 'University College London (UCL) Institute of Education' THEN 'UCL Institute of Education'
    ELSE lp.name
END
  AS provider_name,
  sched.identifier AS schedule_identifier,
  schools.urn AS school_urn,
  schools.name AS school_name,
  schools.high_pupil_premium,
  gias.LA_name AS la_name,
  schools.postcode AS school_postcode,
  app.headteacher_status,
  app.eligible_for_funding,
  app.funding_choice,
  app.targeted_delivery_funding_eligibility,
  app.number_of_pupils,
  app.works_in_childcare,
  app.kind_of_nursery,
  app.funding_eligiblity_status_code,
  app.lead_provider_approval_status AS application_status,
  app.employer_name,
  app.employment_type,
  app.employment_role,
  app.training_status,
  app.primary_establishment,
  pcp.provider_urn AS private_childcare_provider_urn,
  app.ukprn AS school_ukprn,
  app.teacher_catchment,
  app.teacher_catchment_country,
  app.teacher_catchment_iso_country_code,
  app.tsf_primary_eligibility,
  app.tsf_primary_plus_eligibility,
  app.works_in_nursery,
  app.works_in_school,
  app.funded_place,
  app.senco_in_role AS senco_in_role,
  app.senco_start_date AS senco_start_date
FROM
  ${ref('applications_latest_npq')} AS app
  -- Join on User Profile for TRN Verified, TRN Auto-Verified and ECF User ID.
LEFT JOIN
  ${ref('users_latest_npq')} AS users
ON
  users.id = app.user_id
  -- Join on User TRNs to obtain the first trn valid at the time of application to be used as application_trn.
LEFT JOIN
  user_trns
ON
  user_trns.user_id = app.user_id
  AND DATE(app.created_at) BETWEEN DATE(user_trns.valid_from)
  AND IFNULL(DATE(user_trns.valid_to), DATE(2050,12,31))
  -- Join on Previous Application TRNs
LEFT JOIN
  previous_application_trns AS pr_trn
ON
  pr_trn.application_ecf_id = app.ecf_id
  -- Join on Lead Providers for Lead Provider Name
LEFT JOIN
  ${ref('lead_providers_latest_npq')} AS lp
ON
  lp.id = app.lead_provider_id
  -- Join on Schools for School URN, Name, Postcode & High Pupil Premium
LEFT JOIN
  ${ref('schools_latest_npq')} AS schools
ON
  schools.id = app.school_id
  -- Join on GIAS Establishments for School LA Name
LEFT JOIN
  ${ref('establishments')} AS gias
ON
  gias.urn = schools.urn
  -- Join on Schedules for Schedule Identifier
LEFT JOIN
  ${ref('schedules_latest_npq')} AS sched
ON
  sched.id = app.schedule_id
  -- Join on Cohorts for Cohort
LEFT JOIN
  ${ref('cohorts_latest_npq')} AS cohort
ON
  cohort.id = app.cohort_id
  -- Join on Courses for Name, Identifier and to calculate the short version
LEFT JOIN
  ${ref('courses_latest_npq')} AS courses
ON
  courses.id = app.course_id
  -- Join on Private Childcare Providers for their URN
LEFT JOIN
  ${ref('private_childcare_providers_latest_npq')} AS pcp
ON
  pcp.id = app.private_childcare_provider_id ),
  -- Gather the latest outcome per declaration_id based on the created_at date.
  npq_outcomes AS (
SELECT
  declaration_id,
  state AS latest_outcome_state,
  completion_date AS latest_outcome_date
FROM
  ${ref('participant_outcomes_latest_npq')}
QUALIFY
  -- Only want the last created outcome per declaration as these are generated sequentially.
  ROW_NUMBER() OVER(PARTITION BY declaration_id ORDER BY created_at DESC) = 1),
  -- Gather a count of failures per declaration_id present in the data.
  npq_fails AS (
SELECT
  declaration_id AS source_declaration_id,
  COUNT(id) AS count_of_fails
FROM
  ${ref('participant_outcomes_latest_npq')}
WHERE
  state = 'failed'
GROUP BY
  declaration_id ),
  -- Gather all NPQ Declarations and assign hierarchies at state and type. Also calculate funded_declaration bool based on state.
  npq_dec_base_hierarchy AS(
SELECT
  dec.*,
  dp_primary.name AS delivery_partner_name,
  --   dp_secondary.name AS secondary_delivery_partner_name,
  lp.name AS lead_provider_name,
  CASE state
    WHEN 'paid' THEN 7
    WHEN 'payable' THEN 6
    WHEN 'eligible' THEN 5
    WHEN 'submitted' THEN 4
    WHEN 'clawed_back' THEN 3
    WHEN 'awaiting_clawback' THEN 2
    WHEN 'voided' THEN 1
    ELSE 0
END
  AS state_hierarchy,
  CASE declaration_type
    WHEN 'completed' THEN 12
    WHEN 'extended-6' THEN 11
    WHEN 'extended-5' THEN 10
    WHEN 'extended-4' THEN 9
    WHEN 'extended-3' THEN 8
    WHEN 'extended-2' THEN 7
    WHEN 'extended-1' THEN 6
    WHEN 'retained-4' THEN 5
    WHEN 'retained-3' THEN 4
    WHEN 'retained-2' THEN 3
    WHEN 'retained-1' THEN 2
    WHEN 'started' THEN 1
    ELSE 0
END
  AS type_hierarchy,
  IFNULL(state IN ('paid',
      'eligible',
      'payable'), FALSE) AS funded_declaration
FROM
  ${ref('declarations_latest_npq')} AS dec
LEFT JOIN
  ${ref('lead_providers_latest_npq')} AS lp
ON
  lp.id = dec.lead_provider_id
LEFT JOIN
  ${ref('delivery_partners_latest_npq')} AS dp_primary
ON
  dec.delivery_partner_id=dp_primary.id ),
  -- Gather Latest Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
  npq_dec_latest AS (
SELECT
  application_id,
  state AS latest_state,
  declaration_type AS latest_declaration_type,
  lead_provider_name AS latest_lead_provider_name,
  declaration_date AS latest_declaration_date,
  updated_at AS latest_declaration_updated_at,
  delivery_partner_id AS latest_declaration_delivery_partner_id,
  delivery_partner_name AS latest_declaration_delivery_partner_name
FROM
  npq_dec_base_hierarchy
QUALIFY
  ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_hierarchy DESC, state_hierarchy DESC, declaration_date DESC) = 1 ),
  -- Gather Latest Started Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
  npq_dec_start AS (
SELECT
  id AS started_declaration_id,
  application_id,
  state AS started_declaration_state,
  declaration_date AS started_declaration_date,
  funded_declaration AS funded_start_declaration,
  delivery_partner_id AS started_declaration_delivery_partner_id,
  delivery_partner_name AS started_declaration_delivery_partner_name
FROM
  npq_dec_base_hierarchy
WHERE
  declaration_type = 'started'
QUALIFY
  ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_hierarchy DESC, state_hierarchy DESC, declaration_date DESC) = 1 ),
  -- Gather Latest Retained-1 Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
  npq_dec_ret1 AS (
SELECT
  id AS retained1_declaration_id,
  application_id,
  state AS retained1_declaration_state,
  declaration_date AS retained1_declaration_date,
  funded_declaration AS funded_retained1_declaration,
  delivery_partner_id AS retained1_declaration_delivery_partner_id,
  delivery_partner_name AS retained1_declaration_delivery_partner_name
FROM
  npq_dec_base_hierarchy
WHERE
  declaration_type = 'retained-1'
QUALIFY
  ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_hierarchy DESC, state_hierarchy DESC, declaration_date DESC) = 1 ),
  -- Gather Latest Retained-2 Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
  npq_dec_ret2 AS (
SELECT
  id AS retained2_declaration_id,
  application_id,
  state AS retained2_declaration_state,
  declaration_date AS retained2_declaration_date,
  funded_declaration AS funded_retained2_declaration,
  delivery_partner_id AS retained2_declaration_delivery_partner_id,
  delivery_partner_name AS retained2_declaration_delivery_partner_name
FROM
  npq_dec_base_hierarchy
WHERE
  declaration_type = 'retained-2'
QUALIFY
  ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_hierarchy DESC, state_hierarchy DESC, declaration_date DESC) = 1 ),
  -- Gather Latest Completed Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
  npq_dec_comp AS (
SELECT
  id AS completed_declaration_id,
  application_id,
  state AS completed_declaration_state,
  declaration_date AS completed_declaration_date,
  funded_declaration AS funded_completed_declaration,
  delivery_partner_id AS completed_declaration_delivery_partner_id,
  delivery_partner_name AS completed_declaration_delivery_partner_name
FROM
  npq_dec_base_hierarchy
WHERE
  declaration_type = 'completed'
QUALIFY
  ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_hierarchy DESC, state_hierarchy DESC, declaration_date DESC) = 1 )
  -- Build final output joining all CTEs together.
SELECT
  npq_app.*,
  npq_dec_latest.* EXCEPT(application_id),
  npq_dec_start.* EXCEPT(application_id),
  npq_dec_ret1.* EXCEPT(application_id),
  npq_dec_ret2.* EXCEPT(application_id),
  npq_dec_comp.* EXCEPT(application_id),
  IFNULL(npq_fails.count_of_fails, 0) AS count_of_fails,
  npq_outcomes.latest_outcome_state,
  npq_outcomes.latest_outcome_date,
  COALESCE(
    npq_outcomes.latest_outcome_date,
    DATE_ADD(DATE(started_declaration_date), INTERVAL course_usual_length_months MONTH)
   ) AS assumed_no_longer_live_date
FROM
  npq_app
LEFT JOIN
  npq_dec_latest
USING
  (application_id)
LEFT JOIN
  npq_dec_start
USING
  (application_id)
LEFT JOIN
  npq_dec_ret1
USING
  (application_id)
LEFT JOIN
  npq_dec_ret2
USING
  (application_id)
LEFT JOIN
  npq_dec_comp
USING
  (application_id)
LEFT JOIN
  npq_fails
ON
  npq_fails.source_declaration_id = npq_dec_comp.completed_declaration_id
LEFT JOIN
  npq_outcomes
ON
  npq_outcomes.declaration_id = npq_dec_comp.completed_declaration_id
