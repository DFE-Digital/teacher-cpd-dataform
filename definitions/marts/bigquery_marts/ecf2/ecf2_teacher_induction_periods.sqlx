config {
    type: "table",
    assertions: {
        uniqueKey: ["induction_period_id"]
    },
    bigquery: {
        partitionBy: "DATE(induction_period_created_at)",
        clusterBy: ["appropriate_body_name"]
    },
    description: "This mart pulls together the induction periods that ABs have registered for teachers with the associated profile records of the relevant teacher and the appropriate body induction with whom the induction was registered. This mart is designed to give as much detail as possible about the induction period that was registered, the teacher who it was registered for and the appropriate body that registered the induction. All potentially relevant fields from the three main tables: Induction Periods, Teachers and Appropriate Bodies have been combined with the a single record representing an induction period. It is meant as a base from which further marts can be generated. AB's are required to register the induction of ECTs training with them. ECTs are required to complete a full 2 years of induction before receiving qualified teacher status. They can complete their induction in multiple periods with multiple Appropriate Bodies. So it is possible that a single teacher will have multiple induction periods registered in this mart",
    columns: {
        induction_period_id: "ID of single registered induction period",
        number_of_terms: "Number of terms served in the induction period",
        started_on: "Date an induction period was started on",
        finished_on: "Date and time an extension was updated",
        induction_programme: "The programme type for an induction period; Full Induction, Core Induction, Do it Yourself",
        range: "The date range between the started_on and finished_on dates for an induction period",
        local_authority_code: "Gov.uk local authority code taken from DQT",
        establishment_number: "A unique identifier given to all appropriate bodies from DQT",
        dfe_sign_in_organisation_id: "A unique organisation identifier taken from DfE Sign-In",
        legacy_id: "A legacy unique organisation identifier taken from DfE Sign-In",
        qts_awarded_on: "Date an ECT was awarded their QTS",
        trs_qts_awarded_on: "Date an ECT was awarded their QTS (Qualified Teacher Status) as held on TRS",
        outcome: "ECT's overall induction outcome",
        induction_period_created_at: "Date and time an induction period was created by an AB",
        induction_period_updated_at: "Date and time an induction period was updated by an AB",
        trn: {
            description: "A unique 7-digit Teacher Reference Number",
            bigqueryPolicyTags: ["projects/ecf-bq/locations/europe-west2/taxonomies/6302091323314055162/policyTags/301313311867345339"]
        },
        induction_start_date_submitted_to_trs_at: "Date and time an induction start date was submitted to TRS for an ECT",
        trs_induction_status: "Overall induction status held on the TRS",
        trs_initial_teacher_training_end_date: "Date an ECT finished their ITT held on TRS",
        trs_initial_teacher_training_provider_name: "ECT's ITT provider name held on TRS",
        trs_qts_status_description: "ECT's QTS status held on TRS",
        record_creator: "This identifies where the first version of the induction period came from: whether it was imported prior to the service going live (imported), or if it was created by an AB (user_created) or a Support Team member/Developer (admin_created) (indicated by 'admin' in the request_path or by a blank request path)"
    }
}

  -- This CTE identifies whether the first version of an induction period that we hold the data for was imported into the ECF App or whether it was created by an AB user or Support Team member using the new service.
WITH
  induction_period_creator AS (
  SELECT
    id,
    CASE
      WHEN event_type = 'import_entity' THEN 'imported'
      WHEN (request_path LIKE '%admin%' or request_path is null) THEN 'admin_created'
      ELSE 'user_created'
  END
    AS record_creator
  FROM
    ${ref(`induction_periods_version_ecf2`)} AS induction_versions
  QUALIFY
    ROW_NUMBER() OVER (PARTITION BY id ORDER BY valid_from) = 1),
  -- This CTE identifies whether an induction period has been edited by an support admin and/or by a service user (AB)
  induction_period_editors AS (
SELECT
  id,
  LOGICAL_OR(request_path LIKE '%admin%' or request_path is null) AS admin_updates,
  LOGICAL_OR(request_path NOT LIKE '%admin%') AS non_admin_updates
FROM
  ${ref(`induction_periods_version_ecf2`)} AS induction_updates
WHERE event_type = "update_entity"
GROUP BY id)
SELECT
  induction_periods.id AS induction_period_id,
  induction_periods.* EXCEPT (teacher_id,
    created_at,
    updated_at,
    id,
    last_streamed_event_occurred_at,
    last_streamed_event_type),
  induction_periods.created_at AS induction_period_created_at,
  induction_periods.updated_at AS induction_period_updated_at,
  teachers.* EXCEPT(id,
    created_at,
    updated_at,
    corrected_name,
    trs_first_name,
    trs_last_name,
    legacy_id,
    last_streamed_event_occurred_at,
    last_streamed_event_type),
  teachers.id AS teacher_id,
  teachers.legacy_id AS teacher_legacy_id,
  abs.name AS appropriate_body_name,
  abs.* EXCEPT(id,
    created_at,
    name,
    updated_at,
    legacy_id,
    last_streamed_event_occurred_at,
    last_streamed_event_type),
  abs.legacy_id AS ab_legacy_id,
  record_creator,
  CASE
    WHEN non_admin_updates IS NOT NULL AND non_admin_updates is True THEN TRUE
    ELSE FALSE
END
  AS non_admin_update_flag,
  CASE
    WHEN admin_updates IS NOT NULL AND admin_updates is True THEN TRUE
    ELSE FALSE
END
  AS admin_update_flag
FROM
  ${ref(`induction_periods_latest_ecf2`)} AS induction_periods
LEFT JOIN
  ${ref(`teachers_latest_ecf2`)} AS teachers
ON
  teachers.id = induction_periods.teacher_id
LEFT JOIN
  ${ref(`appropriate_bodies_latest_ecf2`)} AS abs
ON
  induction_periods.appropriate_body_id = abs.id
LEFT JOIN
  induction_period_creator
ON
  induction_periods.id = induction_period_creator.id
LEFT JOIN
  induction_period_editors
ON
  induction_periods.id = induction_period_editors.id
