config {
    type: "table",
    assertions: {
        uniqueKey: ["participant_outcome_id"]
    },
    bigquery: {
        partitionBy: "latest_outcome_sent",
        clusterBy: ["latest_state"]
    },
    description: "",
    columns: {
        participant_outcome_id: "ID of each participant's outcome"
    }
}

WITH
  npqoutcomes AS (
  SELECT
    *,
    (ROW_NUMBER() OVER (PARTITION BY id ORDER BY updated_at DESC)) AS rn1,
  FROM
    `ecf-bq.dataform.participant_outcomes_latest_cpd`
  WHERE
    sent_to_qualified_teachers_api_at IS NOT NULL),
  npqapirequests AS (
  SELECT
    *,
    (ROW_NUMBER() OVER (PARTITION BY participant_outcome_id ORDER BY updated_at DESC)) AS rn2,
  FROM
    `ecf-bq.dataform.participant_outcome_api_requests_latest_cpd`)
SELECT
  DISTINCT npqo.id AS participant_outcome_id,
  npqo.updated_at AS latest_outcome_sent,
  npqo.state AS latest_state,
  dec.id AS declaration_id,
  dec.user_id,
  CASE
    WHEN status_code=400 THEN 'Error 400: Add TRN - Participant profile is missing a TRN'
    WHEN status_code=404 THEN 'Error 404: Check TRN - TRA did not recognise TRN currently linked to participant profile'
  ELSE
  JSON_EXTRACT_SCALAR(npqar.response_body,'$.errors.trn[0]')
END
  AS error_message,
  (TIMESTAMP_DIFF(CURRENT_TIMESTAMP,npqar.updated_at,day)) AS days_error_open
FROM
  npqoutcomes npqo
INNER JOIN
  npqapirequests npqar
ON
  npqo.id = npqar.participant_outcome_id
INNER JOIN
  `provider_declarations.participant_declarations_production` dec
ON
  npqo.participant_declaration_id = dec.id
WHERE
  rn1=1
  AND rn2=1
  AND npqar.status_code NOT IN (200,
    204)
ORDER BY
  days_error_open DESC