config {
    type: "table",
    assertions: {
        uniqueKey: ["induction_record_id"]
    },
    bigquery: {
        partitionBy: "",
        clusterBy: ["cohort", "participant_course", "cpd_lead_provider_name","declaration_type"]
    },
    description: "This mart joins the latest induction record for a given ECF participant (found in the ecf_inductions_dedupe mart) with the relevant ecf declarations for that participant resulting in one row per declaration per participant. In order to determine the preferred declaration for each declaration type (if multiple records exist for the same declaration type) we've determined a preferred state_heirarchy:paid>payable>eligible>submitted>clawed_back>awaiting_clawback>voided ",
    columns: {
        induction_record_id: "ID of individual induction record",
        participant_course: "This is a shortened version of participant_type"
    }
}

WITH
  ecf_inductions_expanded AS (
  SELECT
    ecfid.*,
    ppl.induction_start_date,
    ppl.induction_completion_date,
    CASE
      WHEN participant_type LIKE 'ParticipantProfile::ECT' THEN 'ECT'
      WHEN participant_type LIKE 'ParticipantProfile::Mentor' THEN 'Mentor'
    ELSE
    NULL
  END
    AS participant_course
  FROM
    `dataform.ecf_inductions_dedupe` AS ecfid
  LEFT JOIN
    `dataform.participant_profiles_latest_cpd` ppl
  ON
    ecfid.participant_profile_id = ppl.id
  WHERE
    participant_type IS NOT NULL),
  ecf_declarations_expanded AS (
  SELECT
    dec_cpd.*,
    cpd_lead_providers.name AS cpd_lead_provider_name,
    delivery_partners.name AS delivery_partner_name,
    CASE
      WHEN state LIKE 'paid' THEN 7
      WHEN state LIKE 'payable' THEN 6
      WHEN state LIKE 'eligible' THEN 5
      WHEN state LIKE 'submitted' THEN 4
      WHEN state LIKE 'clawed_back' THEN 3
      WHEN state LIKE 'awaiting_clawback' THEN 2
      WHEN state LIKE 'voided' THEN 1
    ELSE
    0
  END
    AS state_heirarchy,
    CASE
      WHEN declaration_type LIKE 'completed' THEN 12
      WHEN declaration_type LIKE 'extended-6' THEN 11
      WHEN declaration_type LIKE 'extended-5' THEN 10
      WHEN declaration_type LIKE 'extended-4' THEN 9
      WHEN declaration_type LIKE 'extended-3' THEN 8
      WHEN declaration_type LIKE 'extended-2' THEN 7
      WHEN declaration_type LIKE 'extended-1' THEN 6
      WHEN declaration_type LIKE 'retained-4' THEN 5
      WHEN declaration_type LIKE 'retained-3' THEN 4
      WHEN declaration_type LIKE 'retained-2' THEN 3
      WHEN declaration_type LIKE 'retained-1' THEN 2
      WHEN declaration_type LIKE 'started' THEN 1
    ELSE
    0
  END
    AS type_heirarchy,
    CASE
      WHEN state = 'paid' THEN TRUE
      WHEN state = 'eligible' THEN TRUE
      WHEN state = 'payable' THEN TRUE
    ELSE
    FALSE
  END
    AS funded_declaration,
    CASE
      WHEN course_identifier LIKE 'ecf-induction' THEN 'ECT'
      WHEN course_identifier LIKE 'ecf-mentor' THEN 'Mentor'
    ELSE
    NULL
  END
    AS participant_course
  FROM
    ${ref(`participant_declarations_latest_cpd`)} AS dec_cpd
  LEFT JOIN
    ${ref(`cpd_lead_providers_latest_cpd`)} AS cpd_lead_providers
  ON
    dec_cpd.cpd_lead_provider_id=cpd_lead_providers.id
  LEFT JOIN
    ${ref(`delivery_partners_latest_cpd`)} AS delivery_partners
  ON
    dec_cpd.delivery_partner_id=delivery_partners.id
  WHERE
    course_identifier LIKE 'ecf%'),
  ecf_participant_declarations AS (
  SELECT
    induction_record_id,
    e_ind.participant_profile_id,
    school_urn,
    schedule_identifier,
    cohort,
    training_status,
    induction_status,
    induction_start_date,
    induction_completion_date,
    e_ind.participant_course,
    declaration_type,
    declaration_date,
    e_dec.state,
    funded_declaration,
    cpd_lead_provider_name,
    e_dec.delivery_partner_name,
  (ROW_NUMBER() OVER (PARTITION BY e_dec.participant_profile_id, e_dec.course_identifier, e_dec.declaration_type ORDER BY e_dec.state_heirarchy DESC, e_dec.declaration_date desc)) AS rn1 
  FROM
    ecf_inductions_expanded e_ind
  LEFT JOIN
   ecf_declarations_expanded e_dec
  ON
    e_ind.participant_profile_id=e_dec.participant_profile_id
    AND e_ind.participant_course=e_dec.participant_course
  QUALIFY
  rn1=1)
SELECT
  *
  EXCEPT(rn1)
FROM
  ecf_participant_declarations 
