config {
    database: "ecf-bq",
    name: "mentors_and_providers_itt_ecf_combined",
    type: "table",
    assertions: {
        uniqueKey: ["TRN", "provider_name"]
    },
    description: "Summary data about the relationship between each Early Careers Framework (ECF) or Initial Teacher Training (ITT) mentor and each organisation (provider) which received direct funding from DfE for training them to be a mentor.\nEach row is a relationship between one mentor and one such provider.\nIntended to used to analyse overlaps between teachers who have been trained by the same provider to be both ECF and Initial Teacher Training (ITT) mentors.",
    columns: {
        TRN: {
            description: "Teacher Reference Number (TRN) of the mentor - a teacher - who this provider received funding to train as an ITT and/or ECF mentor",
            bigqueryPolicyTags: ["projects/ecf-bq/locations/europe-west2/taxonomies/6302091323314055162/policyTags/301313311867345339"]
        },
        provider_name: "Name of the organisation (provider) which received direct funding from DfE to train this teacher to be an ITT and/or ECF mentor.\nFull name, e.g. Ambition Institute.\nNot necessarily the only organisation involved in training this mentor.",
        first_started_funded_ecf_mentor_training_on: "Date when this mentor first started ECF mentor training for which this provider which was funded directly by DfE",
        first_completed_funded_ecf_mentor_training_with_this_lead_provider_on: "Date when this ECF mentor first completed ECF mentor training with this provider, if this provider was funded directly by DfE for the period of training which immediately resulted in completion",
        last_took_part_in_funded_ecf_mentor_training_with_this_lead_provider_on: "Date when this ECF mentor most recently took part in ECF mentor training with this provider for any period of training funded directly by DfE. Does not necessarily indicate that the mentor completed the training.",
        earliest_itt_mentor_training_funding_claim_submitted_at: "Date of the earliest claim submitted for each mentor for ITT mentor training with with this provider.",
        AY_first_started_funded_ecf_mentor_training_in: "first_started_funded_ecf_mentor_training_on as an academic year in format 2030-31",
        AY_earliest_itt_mentor_training_funding_claim_submitted_in: "earliest_itt_mentor_training_funding_claim_submitted_at as an academic year in format 2030-31",
        mentor_type: "Plain text summary of the order in which the mentor was funded for ECF and/or ITT mentor training (if they were)"
    }
}

/* Permissions setup:
This definition assumes that an Owner of the Becoming a Teacher (BaT) GCP project has done the following:
1. In the Becoming a Teacher (BaT) GCP project, create an analytics hub.
2. Share the BaT itt_mentor_analytics_hub dataset by creating a Listing containing the itt_mentor_claims in this analytics hub.
3. Give a user with access to the CPD GCP project Analytics Hub Subscriber access to this Listing.
4. Give the CPD Dataform service account the Fine-Grained Reader role *only* on the BaT BigQuery project (from the project level IAMs screen)

It then assumes that an Owner of the CPD GCP project has done the following:
1. Subscribe to the Listing shared with them from the BaT analytics hub
2. Ensure that the itt_mentor_claims declaration in this Dataform repo is pointing to the dataset they imported the Listing to
*/

SELECT
  COALESCE(ecf_mentor_provider.TRN, itt_mentor_provider.TRN) AS TRN,
  COALESCE(ecf_mentor_provider.provider_name, itt_mentor_provider.provider_name) AS provider_name,
  MIN(first_started_funded_mentor_training_on) AS first_started_funded_ecf_mentor_training_on,
  MIN(first_completed_funded_mentor_training_with_this_lead_provider_on) AS first_completed_funded_ecf_mentor_training_with_this_lead_provider_on,
  MAX(last_took_part_in_funded_mentor_training_with_this_lead_provider_on) AS last_took_part_in_funded_ecf_mentor_training_with_this_lead_provider_on,
  MIN(earliest_claim_submitted_at) AS earliest_itt_mentor_training_funding_claim_submitted_at,
  CASE
    WHEN LOGICAL_OR(itt_mentor_provider.TRN IS NOT NULL) AND LOGICAL_AND(ecf_mentor_provider.TRN IS NULL)
        THEN "Funded for ITT mentor training only"
    WHEN LOGICAL_AND(itt_mentor_provider.TRN IS NULL) AND LOGICAL_OR(ecf_mentor_provider.TRN IS NOT NULL)
        THEN "Funded for ECF mentor training only"
    WHEN MIN(ecf_mentor_provider.first_started_funded_mentor_training_on) < MIN(DATE(itt_mentor_provider.earliest_claim_submitted_at)) THEN
      CASE
        WHEN MIN(DATE(itt_mentor_provider.earliest_claim_submitted_at)) >= MIN(ecf_mentor_provider.first_completed_funded_mentor_training_with_this_lead_provider_on)
            THEN "First funded for ITT mentor training after completing ECF mentor training with this provider"
        WHEN MIN(DATE(itt_mentor_provider.earliest_claim_submitted_at)) < MIN(ecf_mentor_provider.first_completed_funded_mentor_training_with_this_lead_provider_on)
            THEN "First funded for ITT mentor training between starting and completing ECF mentor training with this provider"
        WHEN LOGICAL_AND(ecf_mentor_provider.first_completed_funded_mentor_training_with_this_lead_provider_on IS NULL)
            THEN "First funded for ITT mentor training after starting but not (yet) completing ECF mentor training"
        ELSE "Error in query logic - please report. First funded for ITT mentor training after ECF mentor training"
      END
    WHEN MIN(ecf_mentor_provider.first_started_funded_mentor_training_on) > MIN(DATE(itt_mentor_provider.earliest_claim_submitted_at))
        THEN "First funded for ECF mentor training after ITT mentor training"
    WHEN MIN(ecf_mentor_provider.first_started_funded_mentor_training_on) = MIN(DATE(itt_mentor_provider.earliest_claim_submitted_at))
        THEN "First funded for ECF and ITT mentor training on same date"
    ELSE "Error in query logic - please report"
END
  AS mentor_type,
  IFNULL(
    CONCAT(
      EXTRACT(YEAR FROM(MIN(ecf_mentor_provider.first_started_funded_mentor_training_on))) - 
      IF(EXTRACT(MONTH FROM MIN(ecf_mentor_provider.first_started_funded_mentor_training_on)) < 9, 1, 0),
      '-',
      RIGHT(
          CAST(
          EXTRACT(YEAR FROM(MIN(ecf_mentor_provider.first_started_funded_mentor_training_on)))
              - IF(EXTRACT(MONTH FROM MIN(ecf_mentor_provider.first_started_funded_mentor_training_on)) < 9, 1, 0) + 1 AS STRING
          ), 2
      )
      ),
    "Has not received funded ECF mentor training") AS AY_first_started_funded_ecf_mentor_training_in,
  CASE WHEN LOGICAL_AND(itt_mentor_provider.TRN IS NULL) THEN "Has not received funded ITT mentor training"
    ELSE
    IFNULL(
        CONCAT(
      CAST(MIN(CAST(SPLIT(itt_mentor_provider.claim_academic_year, "/")[0] AS INT64)) AS STRING),
      '-',
      RIGHT(CAST(MIN(CAST(SPLIT(itt_mentor_provider.claim_academic_year, "/")[0] AS INT64)) + 1 AS STRING), 2)
    ), "Unknown")
  END AS AY_earliest_itt_mentor_training_funding_claim_submitted_in
FROM
  ${ref("ecf_mentors_and_providers")} AS ecf_mentor_provider
FULL JOIN
  ${ref("itt_mentor_claims")} AS itt_mentor_provider
ON
  ecf_mentor_provider.TRN = itt_mentor_provider.TRN
  AND ecf_mentor_provider.provider_name = itt_mentor_provider.provider_name
GROUP BY
  TRN,
  provider_name
