config {
    type: "table",
    assertions: {
        uniqueKey: ["application_id"]
    },
    bigquery: {
        partitionBy: "DATE(application_created_at)",
        clusterBy: ["cohort", "provider_name", "course_name", "application_status"]
    },
    description: "This table is designed around NPQ Applications with each application constituting a single record. Participant details have been joined into the application record. Since user profiles are only generated when an application is accepted by a lead provider, gaps in key fields (like schedule) can be the result of a pending application. We also join in declarations to create a 'golden thread' of NPQ participation for each application, splitting out declarations across the different declaration types. In the rare cases that multiple declarations exist for the same type of declaration, we've determined a preferred state_heirarchy:paid>payable>eligible>submitted>clawed_back>awaiting_clawback>voided. For the latest declaration we've also incorporated a type heirarchy, prioritising declarations from further along in the golden thread.",
    columns: {
        application_id: "ID of each unique application in the new NPQ Service. Declarations are joined to the application using this id",
        application_ecf_id: "ECF ID of each unique application. This is the GUID version which can be found in participant_declarations_latest_cpd if created before 28/11/2024.",
        application_trn: "This is the TRN provided at the point of application.",
        trn_verified: "This is the TRN sourced from the User Profile",
        trn_auto_verified: "This refers to whether the TRN provided in the application process was verified.",
        application_created_at: "Refers to the date the application was created.",
        headteacher_status: "Indicates whether the participant is a headteacher in their first five years.",
        eligible_for_funding: "Indicates whether the applicant is eligible for funding for their course.",
        funding_choice: "If a participant is not eligible for funding, this indicates the source of the funding for their NPQ. Possible fields: Another, School, Self, Trust.",
        school_urn: "The unique reference number of the participant's school. Private childcare participants do not need a URN.",
        school_name: "Name of participant's school.",
        high_pupil_premium: "This indicates whether the uplift payment for high pupil premium is applicable to this participant's started declaration. Pupil premium funding is allocated to eligible schools based on the number of 1) pupils who are recorded as eligible for free school meals, or have been recorded as eligible in the past 6 years (referred to as Ever 6 FSM); 2) children previously looked after by a local authority or other state care, including children adopted from state care or equivalent from outside England and Wales.",
        la_name: "Name of local authority.",
        school_postcode: "Postcode of participant's school",
        course_name: "Text name of NPQ course.",
        provider_name: "Name of lead provider.",
        user_profile_id: "The ID of the user profile on the application used to join with users from the new NPQ Service.",
        ecf_user_id: "This comes from the user profile associated with the application. This or trn_verified is the preferred representation of a single user as it transcends programme. ecf_user_id is not PII. This field can be used to join on Teacher Profiles as long as it was created prior to 28/11/2024.",
        targeted_delivery_funding_eligibility: "Indicates whether this NPQ participant is eligible for targeted delivery uplift payment. This following establishments are eligible: 1)state-funded secondary schools and state-funded 16 to 19 educational settings with 1 to 600 pupils will receive a grant payment of £200; 2) state-funded primary schools with more than 150 pupils will receive a grant payment of £200; 3) state-funded primary schools with 1 to 150 pupils will receive a grant payment of £800.",
        number_of_pupils: "Pupil count based on GIAS data at time of registration.",
        works_in_childcare: "Indicates whether the participant works in childcare.",
        kind_of_nursery: "If the participant works in a nursery, indicates which type of nursery. Possible fields: Local authority maintained nursery, Preschool class as part of school, Private nursery, Another Early Years Setting.",
        private_childcare_provider_urn: "The unique reference number given to the employer of participants who work in private childcare.",
        funding_eligiblity_status_code: "Indicates the funding status of a participant.",
        cohort: "The cohort/academic year corresponding to when the participant started their course. Possible fields: 2021 onwards.",
        course_identifier: "Shorthand of NPQ course. This comes from the participant's latest declaration.",
        latest_state: "State of participant's latest declaration. Latest declaration is determined using the field declaration_date as this is the date when the evidence for the declaration is provided.",
        latest_declaration_type: "Type of participant's latest declaration.",
        latest_lead_provider_name: "Name of Lead Provider associated with participant's latest declaration.",
        latest_declaration_date: "Date evidence was submitted for participant's latest declaration.",
        latest_declaration_updated_at: "Date participant's latest declaration was updated",
        application_status: "Indicates whether the application has been approved by the lead provider.Possible fields: Pending, Accepted, Rejected.",
        updated_at: "Refers to the latest updated date for the application record.",
        employer_name: "Shows the entered employer name of non-school users. Text field.",
        employment_role: "Shows the employment role of non-school users. Text field.",
        employment_type: "For non-school users, shows the type of institution they are employed in. Possible fields: Local authority supply teachers, Local authority virtual school, Young offender institute, Hospital school, Other.",
        training_status: "Pulled from participant profile which is created when application is accepted by lead provider.",
        schedule_identifier: "This indicates which sub-cohort or tranche the participant commenced training within an annual cohort. For NPQ, the schedule identifier also distinguishes between the leadership and specialist NPQ types. Pulled from participant profile which is created when application is accepted by lead provider.",
        started_declaration_id: "ID of the participant's started declaration.",
        started_declaration_state: "State of the participant's started declaration.",
        started_declaration_date: "Date evidence was submitted for participant's started declaration.",
        funded_start_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        retained1_declaration_id: "ID of the participant's retained-1 declaration.",
        retained1_declaration_state: "State of the participant's retained-1 declaration.",
        retained1_declaration_date: "Date evidence was submitted for participant's retained-1 declaration.",
        funded_retained1_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        retained2_declaration_id: "ID of the participant's retained-2 declaration.",
        retained2_declaration_state: "State of the participant's retained-2 declaration.",
        retained2_declaration_date: "Date evidence was submitted for participant's retained-2 declaration.",
        funded_retained2_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        completed_declaration_id: "ID of the participant's completed declaration.",
        completed_declaration_state: "State of the participant's completed declaration.",
        funded_completed_declaration: "True if the declaration is in an eligible, payable, or paid state.",
        completed_declaration_date: "Date evidence was submitted for participant's completed declaration.",
        latest_outcome_state: "State of participant's latest outcome for their NPQ. Outcomes are joined in on the participant's completed declaration. Possible fields: Passed, Failed, Voided.",
        latest_outcome_date: "Date of completion for the participant's latest outcome.",
        count_of_fails: "Counts the number of Failed outcome states for a participant.",
        cohort_id: "ID of cohort.",
        lead_provider_id: "ID of Lead Provider.",
        primary_establishment: "Records whether the user's establishment at time of registration was a primary establishment or not. Based on GIAS data.",
        school_ukprn: "UKPRN of the participant's establishment ",
        teacher_catchment: "The catchment zone the participant works in within the UK i.e. England, Wales, Northern Ireland etc. International applicants recorded as 'another'.",
        teacher_catchment_country: "The country the participant works in.",
        teacher_catchment_iso_country_code: "The ISO code for the country the participant works in.",
        tsf_primary_eligibility: "TRUE/FALSE for whether a school is eligible for TSF (£200) owing to it being a primary establishment.",
        tsf_primary_plus_eligibility: "TRUE/ FALSE for whether a school is eligible for the base £200 as well as the additional £600 based on whether they are a primary school and have fewer than 150 pupils. Pupil count based on GIAS data at time of registration.",
        works_in_nursery: "Indicates whether the participant works in a nursery.",
        works_in_school: "Indicates whether the participant works in a school. ",
        funded_place: "This indicates if the accepted NPQ application is being funded by the DfE as one of the capped funded places. Being eligible for funding does not guarantee the application will be funded.",
        senco_in_role: "Answer selected for question 'Are you a SENCO?' during the application stage. Possible results are; yes, no but I plan to be, no and I do not plan to be.",
        senco_start_date: "Provided at time of application and only answered if 'yes' is selected for Are you a SENCO. Format is MM/YYYY stored as a string."
    }
}

-- Gather all NPQ applications in their latest state and join on the supplimentary information
--- We join on User, School, Course, Cohort, Lead Provider, Private Childcare Providers and GIAS information within this CTE to be used in the final output.
WITH npq_app AS (
  SELECT
     app.id AS application_id
    ,app.ecf_id AS application_ecf_id
    ,app.on_submission_trn AS application_trn
    ,users.trn AS trn_verified
    ,users.trn_auto_verified
    ,users.id AS user_profile_id
    ,users.ecf_id AS ecf_user_id
    ,app.created_at AS application_created_at
    ,app.updated_at
    ,app.cohort_id
    ,cohort.start_year AS cohort
    ,courses.identifier AS course_identifier
    ,courses.name AS course_name
    ,CASE
      WHEN courses.name = 'Additional Support Offer for new headteachers' THEN 'EHCO'
      WHEN courses.name = 'The Early Headship Coaching Offer' THEN 'EHCO'
      WHEN REGEXP_CONTAINS(courses.name, r'\(.*\)') THEN REGEXP_EXTRACT(courses.name, r'\((.*?)\)')
      ELSE courses.name
     END AS short_course_name
    ,app.lead_provider_id
    ,lp.name AS provider_name    
    ,sched.identifier AS schedule_identifier
    ,schools.urn AS school_urn
    ,schools.name AS school_name
    ,schools.high_pupil_premium
    ,gias.LA_name AS la_name
    ,schools.postcode AS school_postcode
    ,app.headteacher_status
    ,app.eligible_for_funding
    ,app.funding_choice
    ,app.targeted_delivery_funding_eligibility
    ,app.number_of_pupils
    ,app.works_in_childcare
    ,app.kind_of_nursery
    ,app.funding_eligiblity_status_code
    ,app.lead_provider_approval_status AS application_status
    ,app.employer_name
    ,app.employment_type
    ,app.employment_role
    ,app.training_status
    ,app.primary_establishment
    ,pcp.provider_urn AS private_childcare_provider_urn
    ,app.ukprn AS school_ukprn
    ,app.teacher_catchment
    ,app.teacher_catchment_country
    ,app.teacher_catchment_iso_country_code
    ,app.tsf_primary_eligibility
    ,app.tsf_primary_plus_eligibility
    ,app.works_in_nursery
    ,app.works_in_school
    ,app.funded_place
    ,app.senco_in_role AS senco_in_role
    ,app.senco_start_date AS senco_start_date
  FROM
    ${ref('applications_latest_npq')} AS app
  -- Join on User Profile for TRN Verified, TRN Auto-Verified and ECF User ID.
  LEFT JOIN
    ${ref('users_latest_npq')} AS users
  ON
    users.id = app.user_id
  -- Join on Lead Providers for Lead Provider Name
  LEFT JOIN
    ${ref('lead_providers_latest_npq')} AS lp
  ON
    lp.id = app.lead_provider_id
  -- Join on Schools for School URN, Name, Postcode & High Pupil Premium
  LEFT JOIN
    ${ref('schools_latest_npq')} AS schools
  ON
    schools.id = app.school_id
  -- Join on GIAS Establishments for School LA Name
  LEFT JOIN
    ${ref('establishments')} AS gias
  ON
    gias.urn = schools.urn
  -- Join on Schedules for Schedule Identifier
  LEFT JOIN 
    ${ref('schedules_latest_npq')} AS sched
  ON
    sched.id = app.schedule_id
  -- Join on Cohorts for Cohort
  LEFT JOIN
    ${ref('cohorts_latest_npq')} AS cohort
  ON
    cohort.id = app.cohort_id
  -- Join on Courses for Name, Identifier and to calculate the short version
  LEFT JOIN
    ${ref('courses_latest_npq')} AS courses
  ON
    courses.id = app.course_id
  -- Join on Private Childcare Providers for their URN
  LEFT JOIN 
    ${ref('private_childcare_providers_latest_npq')} AS pcp
  ON
    pcp.id = app.private_childcare_provider_id
),

-- Gather the latest outcome per declaration_id based on the created_at date.
npq_outcomes AS (
  SELECT
     declaration_id
    ,state AS latest_outcome_state
    ,completion_date AS latest_outcome_date
  FROM
    ${ref('participant_outcomes_latest_npq')}
  QUALIFY(
    -- Only want the last created outcome per declaration as these are generated sequentially.
    ROW_NUMBER() OVER(PARTITION BY declaration_id ORDER BY created_at DESC) = 1
  )
),

-- Gather a count of failures per declaration_id present in the data.
npq_fails AS (
  SELECT
     declaration_id AS source_declaration_id
    ,COUNT(id) AS count_of_fails
  FROM
    ${ref('participant_outcomes_latest_npq')}
  WHERE
    state = 'failed'
  GROUP BY
    declaration_id
),

-- Gather all NPQ Declarations and assign hierarchies at state and type. Also calculate funded_declaration bool based on state.
npq_dec_base_heirarchy AS(
  SELECT
     dec.*
    ,lp.name AS lead_provider_name
    ,CASE
      WHEN state LIKE 'paid' THEN 7
      WHEN state LIKE 'payable' THEN 6
      WHEN state LIKE 'eligible' THEN 5
      WHEN state LIKE 'submitted' THEN 4
      WHEN state LIKE 'clawed_back' THEN 3
      WHEN state LIKE 'awaiting_clawback' THEN 2
      WHEN state LIKE 'voided' THEN 1
      ELSE 0
     END AS state_heirarchy
    ,CASE
      WHEN declaration_type LIKE 'completed' THEN 12
      WHEN declaration_type LIKE 'extended-6' THEN 11
      WHEN declaration_type LIKE 'extended-5' THEN 10
      WHEN declaration_type LIKE 'extended-4' THEN 9
      WHEN declaration_type LIKE 'extended-3' THEN 8
      WHEN declaration_type LIKE 'extended-2' THEN 7
      WHEN declaration_type LIKE 'extended-1' THEN 6
      WHEN declaration_type LIKE 'retained-4' THEN 5
      WHEN declaration_type LIKE 'retained-3' THEN 4
      WHEN declaration_type LIKE 'retained-2' THEN 3
      WHEN declaration_type LIKE 'retained-1' THEN 2
      WHEN declaration_type LIKE 'started' THEN 1
      ELSE 0
     END AS type_heirarchy
    ,CASE
      WHEN state = 'paid' THEN TRUE
      WHEN state = 'eligible' THEN TRUE
      WHEN state = 'payable' THEN TRUE
      ELSE FALSE
     END AS funded_declaration
  FROM
    ${ref('declarations_latest_npq')} AS dec
  LEFT JOIN
    ${ref('lead_providers_latest_npq')} AS lp
  ON
    lp.id = dec.lead_provider_id
),

-- Gather Latest Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
npq_dec_latest AS (
  SELECT
     application_id
    ,state AS latest_state
    ,declaration_type AS latest_declaration_type
    ,lead_provider_name AS latest_lead_provider_name
    ,declaration_date AS latest_declaration_date
    ,updated_at AS latest_declaration_updated_at
  FROM
    npq_dec_base_heirarchy 
  QUALIFY (
    ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_heirarchy DESC, state_heirarchy DESC, declaration_date DESC) = 1
  )
),

-- Gather Latest Started Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
npq_dec_start AS (
  SELECT
     id AS started_declaration_id
    ,application_id
    ,state AS started_declaration_state
    ,declaration_date AS started_declaration_date
    ,funded_declaration AS funded_start_declaration
  FROM
    npq_dec_base_heirarchy
  WHERE
    declaration_type = 'started' 
  QUALIFY (
    ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_heirarchy DESC, state_heirarchy DESC, declaration_date DESC) = 1
  )
),

-- Gather Latest Retained-1 Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
npq_dec_ret1 AS (
  SELECT
     id AS retained1_declaration_id
    ,application_id
    ,state AS retained1_declaration_state
    ,declaration_date AS retained1_declaration_date
    ,funded_declaration AS funded_retained1_declaration
  FROM
    npq_dec_base_heirarchy
  WHERE
    declaration_type = 'retained-1' 
  QUALIFY (
    ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_heirarchy DESC, state_heirarchy DESC, declaration_date DESC) = 1
  )
),

-- Gather Latest Retained-2 Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
npq_dec_ret2 AS (
  SELECT
     id AS retained2_declaration_id
    ,application_id
    ,state AS retained2_declaration_state
    ,declaration_date AS retained2_declaration_date
    ,funded_declaration AS funded_retained2_declaration
  FROM
    npq_dec_base_heirarchy
  WHERE
    declaration_type = 'retained-2' 
  QUALIFY (
    ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_heirarchy DESC, state_heirarchy DESC, declaration_date DESC) = 1
  )
),

-- Gather Latest Completed Declaration per Application based on type hierarchy, state hierarchy and declaration_date (evidenced date).
npq_dec_comp AS (
  SELECT
     id AS completed_declaration_id
    ,application_id
    ,state AS completed_declaration_state
    ,declaration_date AS completed_declaration_date
    ,funded_declaration AS funded_completed_declaration
  FROM
    npq_dec_base_heirarchy
  WHERE
    declaration_type = 'completed' 
  QUALIFY (
    ROW_NUMBER() OVER(PARTITION BY application_id ORDER BY type_heirarchy DESC, state_heirarchy DESC, declaration_date DESC) = 1
  )
)

-- Build final output joining all CTEs together.
SELECT 
   npq_app.*
  ,npq_dec_latest.* EXCEPT(application_id)
  ,npq_dec_start.* EXCEPT(application_id)
  ,npq_dec_ret1.* EXCEPT(application_id)
  ,npq_dec_ret2.* EXCEPT(application_id)
  ,npq_dec_comp.* EXCEPT(application_id)
  ,npq_fails.count_of_fails
  ,npq_outcomes.latest_outcome_state
  ,npq_outcomes.latest_outcome_date
FROM
  npq_app
LEFT JOIN
  npq_dec_latest
  USING (application_id)
LEFT JOIN
  npq_dec_start
  USING (application_id)
LEFT JOIN
  npq_dec_ret1
  USING (application_id)
LEFT JOIN
  npq_dec_ret2
  USING (application_id)
LEFT JOIN
  npq_dec_comp
  USING (application_id)
LEFT JOIN
  npq_fails
ON
  npq_fails.source_declaration_id = npq_dec_comp.completed_declaration_id
LEFT JOIN
  npq_outcomes
ON
  npq_outcomes.declaration_id = npq_dec_comp.completed_declaration_id
