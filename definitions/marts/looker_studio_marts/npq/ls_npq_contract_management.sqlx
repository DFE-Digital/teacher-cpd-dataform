config {
    type: "table",
    assertions: {
        uniqueKey: ["row_number_id"]
    },
    bigquery: {
        partitionBy: "",
        clusterBy: ["provider_name", "short_course_name"]
    },
    description: "THIS IS CURRENTLY A PROOF OF CONCEPT. This mart is made to help out NPQ Contract Managers with Lead Provider conversations. It creates a table that outlines the number DfE-funded applications, acceptance rates, starts, and targets for each Lead Provider and their courses.",
    columns: {
        row_number_id: "ID of row number"
    }
}

WITH
  lead_provider_targets AS (
  SELECT
    lead_provider,
    course,
    TARGET
  FROM
    `ecf-bq.static_tables.npq_lead_provider_course_targets`
  WHERE
    academic_year = 'AY23-24'
  ORDER BY
    lead_provider ASC,
    course ASC),
  lead_provider_intake AS (
  SELECT
    provider_name,
    short_course_name,
    COUNT(DISTINCT
      CASE
        WHEN funding_choice IS NULL THEN application_ecf_id
      ELSE
      NULL
    END
      ) AS applications,
    COUNT(DISTINCT
      CASE
        WHEN funding_choice IS NULL AND application_status = 'accepted' THEN application_ecf_id
      ELSE
      NULL
    END
      ) AS accepted_applications,
    COUNT(DISTINCT
      CASE
        WHEN funding_choice IS NULL AND application_status = 'pending' THEN application_ecf_id
      ELSE
      NULL
    END
      ) AS pending_applications,
    COUNT(DISTINCT
      CASE
        WHEN funding_choice IS NULL AND application_status = 'rejected' THEN application_ecf_id
      ELSE
      NULL
    END
      ) AS rejected_applications,
    COUNT(funded_start_declaration) AS starts
  FROM
    ${ref("npq_enrolments")}
  WHERE
    cohort = 2023
  GROUP BY
    provider_name,
    short_course_name
  ORDER BY
    provider_name ASC,
    short_course_name ASC)
SELECT
  intake.*,
  targets.target,
  targets.target-intake.applications AS applications_remainder,
  targets.target-intake.starts AS starts_remainder,
  CASE
    WHEN targets.target <> 0 THEN intake.starts/targets.target
  ELSE
  NULL
END
  AS target_percentage,
  (ROW_NUMBER() OVER()) AS row_number_id
FROM
  lead_provider_intake intake
LEFT JOIN
  lead_provider_targets targets
ON
  intake.provider_name = targets.lead_provider
  AND intake.short_course_name = targets.course
