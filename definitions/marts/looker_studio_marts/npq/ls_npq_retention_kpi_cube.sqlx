config {
    type: "table",
    bigquery: {
        partitionBy: "",
        clusterBy: ["provider_name", "cohort_number", "short_course_name"]
    },
    description: "This mart is designed as a cube to easily calculate retention KPIs for DfE funded NPQ applicants. One row represents a lead provider name, cohort number and short course name combination with the metrics: total_application_count, completed_count, active_count, deferred_count, withdrawn_count and retention_kpi_percentage calcualted for each.",
    columns: {
        provider_name: "Name of the provider.",
        cohort_number: "A policy orientated cohort identifier to indicate which cohort a DfE funded applicants lies, this field is calcualated through a combination of cohort years and in the years 2021-2023 which 'schedule_identifier' they will be a part of.",
        short_course_name: "Shortened name of the course.",
        completed_count: "The count of DfE funded applicants which have completed their NPQ course. Completed NPQ courses are defined as where the retention_status is 'eligible', 'payable' or 'paid'.",
        active_count: "The count of DfE funded applicants which are undertaking their NPQ course.",
        deferred_count: "The count of DfE funded applicants which have deferred their NPQ course.",
        withdrawn_count: "The count of DfE funded applicants which have withdrawn from their NPQ course.",
        total_application_count: "The total number of DfE funded applications recieved",
        retention_numerator: "The calculated numerator of the retention KPI. Retention is defined as the retention rate for all completed and active counts, deferred statuses are excluded from this metric. retention_rate = (completed_count+active_count)/(completed_count+active_count+withdrawn).",
        retention_denominator: "The calculated denominator of the rentention KPI. Retention is defined as the retention rate for all completed and active counts, deferred statuses are excluded from this metric. retention_rate = (completed_count+active_count)/(completed_count+active_count+withdrawn)."
    }
}

WITH
  assign_cohort_number AS (
  SELECT
    application_id,
    provider_name,
    short_course_name,
    course_identifier,
    course_name,
    funded_start_declaration,
    cohort,
    schedule_identifier,
    CASE
      WHEN cohort = 2021 AND schedule_identifier IN ('npq-aso-november', 'npq-aso-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 1'
      WHEN cohort = 2021
    AND schedule_identifier IN ('npq-aso-june',
      'npq-ehco-june',
      'npq-leadership-spring',
      'npq-specialist-spring') THEN 'Cohort 2'
      WHEN cohort = 2022 AND schedule_identifier IN ('npq-ehco-november', 'npq-ehco-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 3'
      WHEN cohort = 2022
    AND schedule_identifier IN ('npq-ehco-march',
      'npq-ehco-june',
      'npq-leadership-spring',
      'npq-specialist-spring') THEN 'Cohort 4'
      WHEN cohort = 2023 AND schedule_identifier IN ('npq-ehco-november', 'npq-ehco-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 5'
      WHEN cohort = 2023
    AND schedule_identifier IN ('npq-ehco-march',
      'npq-ehco-june',
      'npq-leadership-spring',
      'npq-specialist-spring') THEN 'Cohort 6'
      WHEN cohort = 2024 THEN 'Cohort 7'
      WHEN cohort = 2025 THEN 'Cohort 8'
      ELSE 'n/a'
  END
    AS cohort_number,
    COALESCE((CASE
          WHEN completed_declaration_state IN ('eligible', 'payable', 'paid') THEN 'completed'
          ELSE NULL
      END
        ),training_status) AS retention_status
  FROM
    ${ref('npq_enrolments')}
  WHERE
    funded_start_declaration
  QUALIFY
    ROW_NUMBER() OVER (PARTITION BY application_id ORDER BY application_created_at DESC ) = 1 )
    -- whilst duplicates are not expected in this table, the most recently created application will be prioritised if there are duplicates.
SELECT
  provider_name,
  cohort_number,
  short_course_name,
  COUNT(CASE
      WHEN retention_status IN ('completed', 'active', 'deferred', 'withdrawn') THEN application_id
  END
    ) AS total_application_count,
  COUNT(
    CASE
      WHEN retention_status = 'completed' THEN application_id
  END
    ) AS completed_count,
  COUNT(
    CASE
      WHEN retention_status = 'active' THEN application_id
  END
    ) AS active_count,
  COUNT(
    CASE
      WHEN retention_status = 'deferred' THEN application_id
  END
    ) AS deferred_count,
  COUNT(
    CASE
      WHEN retention_status = 'withdrawn' THEN application_id
  END
    ) AS withdrawn_count,
  COUNT(
    CASE
      WHEN retention_status IN ('completed', 'active') THEN application_id
  END
    ) AS retention_numerator,
  COUNT(
    CASE
      WHEN retention_status IN ('completed', 'active', 'withdrawn') THEN application_id
  END
    ) retention_denominator
FROM
  assign_cohort_number
GROUP BY
  provider_name,
  cohort_number,
  short_course_name
