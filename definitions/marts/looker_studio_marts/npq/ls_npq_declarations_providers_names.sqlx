config {
    type: "table",
    assertions: {
        uniqueKey: ["declaration_id"],

    },
    bigquery: {
        partitionBy: "DATE(declaration_date)",
        clusterBy: ["lp_name", "course_identifier"]
    },
    description: "This mart holds the most recent state for each declaration, it is intended for use in the NPQ - Self-Serve Data dashboard. It holds the most recent state of each declaration for analytical purposes and to support conversations between the NPQ product team, contract managers, and other Digital colleagues. It joins the most recent statement information from statement_line_items to find the financial statement's cohort the declaration is stored against.",
    columns: {
        declaration_id: "Unique ID of the declaration.",
        application_id: "The ID of the application associated to the declaration",
        cohort: "The cohort/academic year corresponding to when the participant started their course. Possible fields: 2021 onwards.",
        cohort_number: "A policy-oriented identifier indicating which DfE-funded applicant cohort the record belongs to. The cohort is determined by the applicantâ€™s cohort.start_year and, for start years 2021-2023, by the schedule_identifier. Cohort 1 is the autumn schedule in the 2021 cohort; Cohort 2, the spring schedule in the 2021 cohort; Cohort 3, the autumn schedule in the 2022 cohort; Cohort 4, the spring schedule in the 2022 cohort; Cohort 5, the autumn schedule in the 2023 cohort; and Cohort 6, the spring schedule in the 2023 cohort. All 2024 applicants are assigned to Cohort 7. For 2025, applicants are split into Cohort 8 if their application was created before 18 May 2025 (spring window) and Cohort 9 if created on or after 8 September 2025 (autumn window). Applicants not matching these rules are assigned n/a.",
        schedule_identifier: "This indicates which sub-cohort or tranche the participant commenced training within an annual cohort. For NPQ, the schedule identifier also distinguishes between the leadership and specialist NPQ types. Pulled from participant profile which is created when application is accepted by lead provider.",
        course_identifier: "Name of the NPQ course indicated on the application.",
        declaration_date: "Date evidence was submitted for participants most recent declaration",
        declaration_type: "Type of participant's latest declaration.",
        declaration_state: "State of participant's latest declaration. Latest declaration is determined using the field declaration_date as this is the date when the evidence for the declaration is provided.",
        lp_name: "The name of the lead provider indicated on the application.",
        delivery_partner_name: "The name of the delivery partner indicated on the declaration.",
        secondary_delivery_partner_name: "The name of the secondary delivery partner indicated on the declaration.",
        created_at: "Timestamp of when the declaration was created.",
        updated_at: "Timestamp of when the declaration was most recently updated.",
        statement_cohort: "The cohort stored against the declaration.",
        verified_trn: {
            description: "The TRN of the participant that has been verified by the Database of Qualified Teachers (DQT).",
            bigqueryPolicyTags: ["projects/ecf-bq/locations/europe-west2/taxonomies/6302091323314055162/policyTags/301313311867345339"]
        }
    }
}

  /*This section pulls together statement info for all declarations from the tables statement_line_items and statements and gives the cohort associated with the statement that each declaration was made against*/
WITH
  npq_statement_information AS (
  SELECT
    statement_line_items.declaration_id AS internal_declaration_id,
    MAX(cohorts.start_year) AS statement_cohort
  FROM
    ${ref('statement_items_latest_npq')} AS statement_line_items
  LEFT JOIN
    ${ref('statements_latest_npq')} AS statements
  ON
    statements.id = statement_line_items.statement_id
  LEFT JOIN
    ${ref('cohorts_latest_npq')} AS cohorts
  ON
    cohorts.id = statements.cohort_id
  GROUP BY
    statement_line_items.declaration_id )
SELECT
  declarations.ecf_id AS declaration_id,
  applications.ecf_id AS application_id,
  cohort.start_year AS cohort,
  schedules.identifier AS schedule_identifier,
  courses.identifier AS course_identifier,
  declarations.declaration_date,
  declarations.declaration_type,
  declarations.state AS declaration_state,
  lead_providers.name AS lp_name,
  statements.statement_cohort,
  declarations.delivery_partner_id AS delivery_partner_id,
  delivery_partners.name AS delivery_partner_name,
  secondary_delivery_partners.name as secondary_delivery_partner_name,
  declarations.created_at,
  declarations.updated_at,
  declarations.lead_provider_id AS lead_provider_id,
  users.ecf_id AS ecf_user_id,
  CASE
    WHEN users.trn_verified = TRUE THEN users.trn
    ELSE NULL
END
  AS verified_trn,
  CASE
    WHEN cohort.start_year = 2021 AND schedules.identifier IN ('npq-aso-november', 'npq-aso-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 1'
    WHEN cohort.start_year = 2021
  AND schedules.identifier IN ('npq-aso-june',
    'npq-ehco-june',
    'npq-leadership-spring',
    'npq-specialist-spring') THEN 'Cohort 2'
    WHEN cohort.start_year = 2022 AND schedules.identifier IN ('npq-ehco-november', 'npq-ehco-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 3'
    WHEN cohort.start_year = 2022
  AND schedules.identifier IN ('npq-ehco-march',
    'npq-ehco-june',
    'npq-leadership-spring',
    'npq-specialist-spring') THEN 'Cohort 4'
    WHEN cohort.start_year = 2023 AND schedules.identifier IN ('npq-ehco-november', 'npq-ehco-december', 'npq-leadership-autumn', 'npq-specialist-autumn') THEN 'Cohort 5'
    WHEN cohort.start_year = 2023
  AND schedules.identifier IN ('npq-ehco-march',
    'npq-ehco-june',
    'npq-leadership-spring',
    'npq-specialist-spring') THEN 'Cohort 6'
    WHEN cohort.start_year = 2024 THEN 'Cohort 7'
    WHEN cohort.start_year = 2025
  AND applications.created_at < '2025-05-18' THEN 'Cohort 8'
    WHEN cohort.start_year = 2025 AND applications.created_at >= '2025-09-08' THEN 'Cohort 9'
    ELSE 'n/a'
END
  AS cohort_number,
FROM
  ${ref('declarations_latest_npq')} AS declarations
LEFT JOIN
  ${ref('applications_latest_npq')} AS applications
ON
  declarations.application_id = applications.id
LEFT JOIN
  ${ref('users_latest_npq')} AS users
ON
  users.id = applications.user_id
LEFT JOIN
  ${ref('schedules_latest_npq')} AS schedules
ON
  schedules.id = applications.schedule_id
LEFT JOIN
  ${ref('cohorts_latest_npq')} AS cohort
ON
  cohort.id = applications.cohort_id
LEFT JOIN
  ${ref('lead_providers_latest_npq')} AS lead_providers
ON
  lead_providers.id = declarations.lead_provider_id
LEFT JOIN
  ${ref('courses_latest_npq')} AS courses
ON
  courses.id = applications.course_id
LEFT JOIN
  npq_statement_information AS statements
ON
  statements.internal_declaration_id = declarations.id
LEFT JOIN
  ${ref('delivery_partners_latest_npq')} AS delivery_partners
ON
  declarations.delivery_partner_id = delivery_partners.id
LEFT JOIN
  ${ref('delivery_partners_latest_npq')} AS secondary_delivery_partners
ON
  declarations.secondary_delivery_partner_id = secondary_delivery_partners.id
