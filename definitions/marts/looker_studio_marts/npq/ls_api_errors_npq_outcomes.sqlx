config {
    type: "table",
    assertions: {
        uniqueKey: ["participant_outcome_id"]
    },
    bigquery: {
        partitionBy: "DATE(latest_outcome_sent)",
        clusterBy: ["latest_state", "error_message"]
    },
    description: "This mart creates a table that outlines the number of NPQ Outcomes that have been sent to the TRA but have failed to be verified. It sits in the CPD - API Monitoring dashboard.",
    columns: {
        participant_outcome_id: "ID of each participant's outcome",
        latest_outcome_sent: "Timestamp of when a participant's most recent outcome was sent over the API.",
        latest_state: "The state of a participant's most recent outcome. In this table, all states should be 'passed'",
        declaration_id: "ID of the 'completed' declaration associated with the participant's outcome.",
        ecf_user_id: "The participant's ECF User ID (GUID) that can be used to link to ECF Teacher Profiles if they existed before NPQ separation and to NPQ users table on ecf_id.",
        error_message: "The error code and reason why the outcome couldn't be processed.",
        days_error_open: "How long since the error was raised. Calculated by finding the difference between the current timestamp and the created_at field from participant_outcome_api_requests_latest_cpd"
    }
}

WITH
  npq_outcomes AS (
  SELECT
    id,
    declaration_id AS participant_declaration_id,
    updated_at,
    created_at,
    sent_to_qualified_teachers_api_at,
    state
  FROM
    ${ref(`participant_outcomes_latest_npq`)}
  WHERE
    sent_to_qualified_teachers_api_at IS NOT NULL),
  npq_api_requests AS (
  SELECT
    id,
    participant_outcome_id,
    status_code,
    response_body,
    updated_at,
    created_at
  FROM
    ${ref(`participant_outcome_api_requests_latest_npq`)}
  QUALIFY
    ROW_NUMBER() OVER (PARTITION BY participant_outcome_id ORDER BY created_at DESC) = 1
    AND CAST(status_code AS INT) NOT IN (200, 204)
  )
SELECT
  npq_outcomes.id AS participant_outcome_id,
  npq_outcomes.sent_to_qualified_teachers_api_at AS latest_outcome_sent,
  npq_outcomes.state AS latest_state,
  declarations.id AS declaration_id,
  users.ecf_id AS ecf_user_id,
  CASE
    WHEN status_code='400' THEN 'Error 400: Add TRN - User profile is missing a TRN'
    WHEN status_code='404' THEN 'Error 404: Check TRN - TRA did not recognise TRN currently linked to user.'
  ELSE
  JSON_EXTRACT_SCALAR(npq_api_requests.response_body,'$.errors.trn[0]')
END
  AS error_message,
  (TIMESTAMP_DIFF(CURRENT_TIMESTAMP,npq_api_requests.created_at, DAY)) AS days_error_open
FROM
  npq_outcomes
INNER JOIN
  npq_api_requests
ON
  npq_outcomes.id = npq_api_requests.participant_outcome_id
INNER JOIN
  ${ref(`declarations_latest_npq`)} declarations
ON
  npq_outcomes.participant_declaration_id = declarations.id
LEFT JOIN
  ${ref('applications_latest_npq')} AS applications
ON
  applications.id = declarations.application_id
LEFT JOIN
  ${ref('users_latest_npq')} AS users
ON
  users.id = applications.user_id