config {
    type: "table",
    bigquery: {
        partitionBy: "",
        clusterBy: ["current_cohort", "participant_role", "participant_profile_id"]
    },
    description: "This mart combines elements of the ECF Golden Thread and relevant declarations (submitted, eligible, payable, paid) for both ECTs and Mentors to assess if the currently assigned cohort is in line with the suggested cohort based on the induction start date for ECTs and the earliest declaration date for Mentors. \n \
    Objective: \n \
        To gather all ECTs & Mentors inducted within 2021-2023 cohorts for evaluation as to whether they are allocated to correct the cohort based on criteria below. \n \
    Instructions: \n \
        For ECTs in the 'wrong' cohort with declarations: \n \
          WHERE \n \
            eligible_for_funding = TRUE \n \
            AND \n \
            participant_role = 'ECT' \n \
            AND \n \
            declaration_id IS NOT NULL \n \
            AND \n \
            -- Check if the lead provider is NIOT and there is a Live Partnership in place. \n \
            niot_partnership_chk = 0 \n \
            AND \n \
            start_date_suggestion_match = 0 \n \
        For Mentors in the 'wrong' cohort with declarations: \n \
          WHERE \n \
            eligible_for_funding = TRUE \n \
            AND \n \
            participant_role = 'Mentor' \n \
            AND \n \
            declaration_id IS NOT NULL \n \
            AND \n \
            -- Check if the lead provider is NIOT and there is a Live Partnership in place. \n \
            niot_partnership_chk = 0 \n \
            AND \n \
            earliest_dec_suggestion_match = 0 \n \
        For ECTs in the 'wrong' cohort without declarations: \n \
           WHERE \n \
            eligible_for_funding = TRUE \n \
            AND \n \
            participant_role = 'ECT' \n \
            AND \n \
            declaration_id IS NULL \n \
            AND \n \
            -- Check if the lead provider is NIOT and there is a Live Partnership in place. \n \
            niot_partnership_chk = 0 \n \
            AND \n \
            start_date_suggestion_match = 0 \n \
    Dependencies: \n \
        dataform.ecf_golden_thread \n \
        dataform.ls_declarations_provider_names",
    columns: {
        user_id: "This comes from the teacher profile associated with the participant profile. User ID also exists independently in other tables.",
        participant_profile_id: "The ID from a participant's profile in the CPD service.",
        participant_role: "The role of the participant which is either ECT or Mentor as per the participant type.",
        current_schedule: "The schedule as per the participant profile.",
        declaration_id: "The unique identifier for the declaration.",
        declaration_date: "The date of when evidence was submitted against the declaration.",
        lead_provider_name: "The name of the Lead Provider that submitted the declaration.",
        induction_lead_provider_name: "The name of the Lead Provider associated with the induction record. Used for ECTs & Mentors with zero s/e/p/p declarations.",
        declaration_type: "The type of declaration which can be started, retained-#, extended-# or completed. #'s range from 1 to 4.",
        declaration_state: "The state of the declaration which for this mart can only be submitted, eligible, payable, or paid. (s/e/p/p)",
        current_cohort: "The cohort/academic year corresponding to when the participant started their course as per the service.",
        induction_start_date: "The date when the ECT or Mentor started their induction taken from their Participant Profile.",
        eligible_for_funding: "TRUE/FALSE flag for funding eligibility.",
        partnership_id: "ID for the Lead Provider-School partnership for a given cohort.",
        partnership_relationship: "TRUE/FALSE for the partnership_id taken from partnerships_latest_cpd. The relationship is 'live' when the value returns FALSE.",
        earliest_declaration_date: "The first declaration date for the participant_profile_id where the declaration is funded (eligible, payable or paid).",
        unique_participant_counter: "1 or 0 if the row is the first instance of the participant_profile_id. Used in reporting as a means of gaining unique count of participants.",
        has_induction_start_date: "TRUE/FALSE if the induction_start_date field is not null."
    }
}

/*** ECF Cohort Corrections Looker Studio Data Mart ***/

/*
  Objective:
    To gather all ECTs & Mentors inducted within 2021-2023 cohorts for evaluation as to whether they are allocated to correct the cohort based on criteria below.

  Instructions:
    For ECTs in the "wrong" cohort with declarations:
      WHERE
        eligible_for_funding = TRUE
        AND
        participant_role = 'ECT'
        AND 
        declaration_id IS NOT NULL
        AND
        niot_partnership_chk = 0
        AND
        start_date_suggestion_match = 0
      
    For Mentors in the "wrong" cohort with declarations:
      WHERE
        eligible_for_funding = TRUE
        AND
        participant_role = 'Mentor'
        AND 
        declaration_id IS NOT NULL
        AND
        niot_partnership_chk = 0
        AND
        earliest_dec_suggestion_match = 0

    For ECTs in the "wrong" cohort without declarations:
      WHERE
        eligible_for_funding = TRUE
        AND
        participant_role = 'ECT'
        AND 
        declaration_id IS NULL
        AND
        niot_partnership_chk = 0
        AND
        start_date_suggestion_match = 0

  Dependencies:
    dataform.ecf_golden_thread
    dataform.ls_declarations_provider_names
    dataform.partnerships_latest_cpd

  Version History:
    1.0 2024-06-05 Tony Page
      Initial Build
*/

-- Gather ECF Golden Thread
WITH golden_thread AS( 
  SELECT
     -- Manually assign the user_id for specific participant profile where the profile no longer exists in latest_cpd data and has no superceeded record to call upon.
     CASE 
      WHEN egt.participant_profile_id = '8cd0928c-ecad-482f-95cd-6a0ff3e840ad' THEN '79dee4de-a6dd-407c-ab1c-690fcb6d0056'
      ELSE egt.user_id
     END AS user_id
    ,egt.participant_profile_id
    ,egt.participant_course AS participant_role
    ,egt.schedule_identifier
    ,egt.induction_start_date AS induction_start_date
    ,egt.cohort
    ,egt.eligible_for_funding
    ,egt.partnership_id
    ,egt.partnership_relationship
    ,egt.lead_provider_name AS induction_lead_provider_name
  FROM 
    ${ref('ecf_golden_thread')} AS egt
),

-- Collect all s/e/p/p declarations relating to ECF in the appropriate states.
declarations AS (
  SELECT
     declaration_id
    ,DATE(declaration_date) AS declaration_date
    ,declaration_type
    ,state AS declaration_state
    ,participant_profile_id
    ,cpd_lead_provider_name AS lead_provider_name
    -- Calculate earliest declaration date for the participant for funded declarations only.
    ,MIN(CASE WHEN state IN ('paid', 'payable', 'eligible') THEN DATE(declaration_date) ELSE DATE(2050,12,31) END) OVER (PARTITION BY participant_profile_id) AS earliest_declaration_date
  FROM
    ${ref('ecf_declarations')}
  WHERE
    state IN (
       'paid'
      ,'payable'
      ,'eligible'
      ,'submitted'
    )
),

-- Join declarations onto deduped induction records & add on the grouping of suggested cohorts by induction start date and earliest declaration..
combined_data AS (
  SELECT 
     pro.user_id
    ,pro.participant_profile_id
    ,pro.participant_role
    ,pro.schedule_identifier AS current_schedule
    ,dec.declaration_id
    ,dec.declaration_date
    ,dec.lead_provider_name
    ,IF(pro.induction_lead_provider_name = 'No lead provider', NULL, pro.induction_lead_provider_name) AS induction_lead_provider_name
    ,dec.declaration_type
    ,dec.declaration_state
    ,pro.cohort AS current_cohort
    ,pro.induction_start_date
    ,pro.eligible_for_funding
    ,pro.partnership_id
    ,pro.partnership_relationship
    ,dec.earliest_declaration_date AS earliest_declaration_date
    ,CASE
      WHEN induction_start_date < '2021-09-01' THEN '2023'
      WHEN induction_start_date BETWEEN '2021-09-01' AND '2022-05-31' THEN '2021'
      WHEN induction_start_date BETWEEN '2022-06-01' AND '2022-08-31' THEN '2021,2022'
      WHEN induction_start_date BETWEEN '2022-09-01' AND '2023-05-31' THEN '2022'
      WHEN induction_start_date BETWEEN '2023-06-01' AND '2023-08-31' THEN '2022,2023'
      WHEN induction_start_date BETWEEN '2023-09-01' AND '2024-05-31' THEN '2023'
      ELSE NULL
    END AS start_date_suggested_true_cohort
    ,CASE
      WHEN earliest_declaration_date BETWEEN '2021-09-01' AND '2023-05-31' THEN '2021,2022'
      WHEN earliest_declaration_date BETWEEN '2023-06-01' AND '2023-08-31' THEN '2021,2022,2023'
      WHEN earliest_declaration_date BETWEEN '2023-09-01' AND '2024-05-31' THEN '2023'
     END AS earliest_dec_suggested_true_cohort
    ,CASE
      WHEN pro.partnership_id IS NOT NULL AND pro.partnership_relationship = FALSE AND dec.lead_provider_name = 'National Institute of Teaching' THEN 1
      ELSE 0
     END AS niot_partnership_chk
    ,CASE
      WHEN ROW_NUMBER() OVER(PARTITION BY pro.participant_profile_id ORDER BY dec.declaration_date ASC) = 1 THEN 1
      ELSE 0
     END AS unique_participant_counter
  FROM 
    golden_thread pro
  LEFT JOIN 
    declarations dec 
  ON
    pro.participant_profile_id = dec.participant_profile_id
  WHERE
    pro.participant_role IS NOT NULL
  ORDER BY
    pro.user_id ASC, pro.participant_profile_id ASC, pro.participant_role ASC, dec.declaration_date ASC
),

-- Build preliminary output data which includes the binary result for cohort matching each of the suggested values.
output_data AS (
  SELECT 
    *
    ,CASE
      WHEN INSTR(start_date_suggested_true_cohort, CAST(current_cohort AS STRING)) > 0 THEN 1
      ELSE 0
     END AS start_date_suggestion_match
    ,CASE
      WHEN INSTR(earliest_dec_suggested_true_cohort, CAST(current_cohort AS STRING)) > 0 THEN 1
      ELSE 0
     END AS earliest_dec_suggestion_match
  FROM
   combined_data
)

-- Generate output
SELECT 
  *
  ,IF(induction_start_date IS NOT NULL, TRUE, FALSE) AS has_induction_start_date
FROM 
  output_data