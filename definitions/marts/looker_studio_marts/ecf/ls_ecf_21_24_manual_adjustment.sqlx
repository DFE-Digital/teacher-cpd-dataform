config {
    type: "table",
    assertions: {
        uniqueKey: ["declaration_id"]
    },
    bigquery: {
        partitionBy: "statement_date",
        clusterBy: ["cpd_lead_provider_name"]
    },
    description: "This mart produces 2 banding values for each declaration in the 2024 statement cohort relating to participants that have rolled over from the 2021 cohort. The 2021 banding value (A-D) and 2024 banding value (A-C) are used by the SRM team to calculate any financial adjustment required when paying providers in 2024. \n \
    Each banding carries a financial value and that value differs from the 2021 contract to the 2024 contract. This mart enables the SRM team to see which banding would have been applied if paid from the 2021 statement cohort and which bandng applies in the 2024 statement cohort. \n \
    The mart also includes the statement date (date at which the declaration will be paid) so that the SRM team can isolate the current statement date which is determined as the next date for payment. \n \
    Declarations states present in this mart are eligible, payable, paid, voided, awaiting_clawback and clawed_back as the SRM team also need to assess if a manual adjustment is needed when clawing back any funds. \n \
    When a declaration is voided by a Lead Provider, the statement date is updated in the service the date at which it will be clawed back. The SRM team are aware that when this occurs the declaration will not be visible on the statement date it was originally paid and they must take appropriate exports from the associated dashboard for historical records.",
    columns: {
        banding_qualifier_2021: "The number of declarations paid in the 2021 statement cohort for the declaration type with the lead provider. This number determines which banding the latest declaration falls within if it had been submitted in the 2021 statement cohort.",
        target_2021: "The upper participant volume valid in the 2021 statement cohort/contract for lead providers that when exceeded triggered a Band D financial rate.",
        banding_2021: "The banding value based on the 2021 banding qualifier for the new declaration related to the rolled over participant",
        banding_qualifer_2024: "The number of declarations eligible, payable or paid in the 2024 statement cohort for the declaration type with the lead provider. This number determines which banding the latest declaration falls within for the 2024 statement cohort.",
        banding_2024: "The banding value based on the 2024 banding qualifier for the new declaration related to the rolled over participant.",
        is_current_statement: "TRUE/FALSE if the statement date associated with the new declaration is for the next statement date due for payment.",
        statement_date: "The date of when the declaration is expected to be paid. This date is always the first of the month in which it will be paid, however, the actual payment date may be later in the month.",
        declaration_id: "The ID of the declaration that is being assessed for its banding in 2021 and 2024.",
        declaration_type: "The type of the declaration that is being assessed for its banding in 2021 and 2024.",
        state: "The state of the declaration that is being assessed for its banding in 2021 and 2024. The values can include; eligible, payable, paid, voided, awaiting_clawback and clawed_back.",
        cpd_lead_provider_name: "The name of the lead provider that submitted the declaration.",
        cpd_delivery_partner_name: "The name of the delivery partner associated with the declaration as provided by the lead provider at the time of submission.",
        participant_profile_id: "The participant profile ID of the participant this declaration relates to.",
        participant_course: "The particiapnt type of the participant (ECT or Mentor).",
        user_id: "The User ID for the participant related to this declaration."
    }
}

-- Gather 2021 declaration type totals per lead provider & participant type to create a banding qualifier.
--- The funding band applied to a declaration is dependant on the number of applicants with the same declaration type with the lead provider.
--- This CTE calculates how many declarations by type were paid to Lead providers in the 2021 statement cohort.
--- This will be used to assess the newly raised declarations for rolled over participants to provide a banding in 2021.
WITH bandings_2021 AS (
  SELECT
     declarations.cpd_lead_provider_name
    ,declarations.declaration_type
    ,COUNT(DISTINCT declarations.declaration_id) AS banding_qualifier
  FROM
    ${ref('ecf_declarations')} AS declarations
  WHERE
    declarations.cpd_lead_provider_name IS NOT NULL
    AND
    (
    -- No further changes are being made to the 2021 statement cohort so only paid declarations will be valid. Any in an eligible or payable state will need to be reraised or the participant to be transferred.
      (declarations.state = 'paid' AND declarations.statement_cohort = 2021)
      OR
      (declarations.funded_declaration = TRUE AND declarations.cohort_rolled_over_21_24 = TRUE)
    )
  GROUP BY
     declarations.cpd_lead_provider_name
    ,declarations.declaration_type
),

-- Create table of upper particiapnt volume targets taken from the live service for 2021.
--- In the 2021 statement/contract a Band D existed where if an LP exceeded their upper limit. In subsequent contracts this banding was removed.
--- The CTE below creates a table of these upper limits for each LP to be used in evaluating the banding qualifier created above.
targets_2021 AS (
  SELECT
     'Ambition Institute' AS cpd_lead_provider_name
    ,10001 AS target
  UNION ALL
  SELECT
     'Best Practice Network' AS cpd_lead_provider_name
    ,6001 AS target
  UNION ALL
  SELECT
     'Education Development Trust' AS cpd_lead_provider_name
    ,7126 AS target
  UNION ALL
  SELECT
     'Teach First' AS cpd_lead_provider_name
    ,8801 AS target
  UNION ALL
  SELECT
     'UCL Institute of Education' AS cpd_lead_provider_name
    ,8958 AS target
),

-- Gather 2024 statement cohort declarations and create 2024 banding qualifier values.
--- This CTE looks at all funded declarations (e/p/p) in the 2024 statement cohort and produces a count by LP & Statement Date (date of payment)
--- This will be used to assess the newly raised declarations for rolled over participants to provide a banding in 2024.
bandings_2024 AS (
  SELECT
     PARSE_DATE('%B %Y', statements.name) AS statement_date
    -- This logic assumes that there will only be one statement_date in the future as when a declaration is submitted it is tagged against the next statement period and not any further in time.
    ,CASE 
      WHEN PARSE_DATE('%B %Y', statements.name) > CURRENT_DATE() THEN TRUE
      ELSE FALSE
     END AS is_current_statement
    ,declarations.cpd_lead_provider_name
    ,declarations.declaration_type
    ,COUNT(DISTINCT declarations.declaration_id) AS statement_date_banding_qualifier
  FROM
    ${ref('ecf_declarations')} AS declarations
  LEFT JOIN
    ${ref('statements_latest_cpd')} AS statements
  ON
    statements.id = declarations.statement_id
  WHERE
    declarations.funded_declaration = TRUE
    AND
    declarations.statement_cohort = 2024
  GROUP BY
     statement_date
    ,is_current_statement
    ,declarations.cpd_lead_provider_name
    ,declarations.declaration_type
),

-- Extend the bandings_2024 CTE with a cumulative banding qualifier.
--- The banding needs to be assessed at each statement period as it passes due to those being paid on a previous statement date need to form part of the declaration count in the next.
bandings_2024_ext AS (
  SELECT
     *
    -- Generate cumulative banding qualifer so that when future statement dates appear the value is the total including the previous statement dates.
      -- This is because at each financial statement point the number of relevant participants is all of them including those paid in previous financial statements.
    ,SUM(statement_date_banding_qualifier) OVER(PARTITION BY cpd_lead_provider_name, declaration_type ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS cumulative_banding_qualifier
  FROM
    bandings_2024
  ORDER BY
    statement_date ASC -- Required so that the sum statement above is acting across the correct sequence of rows.
),

-- Gather all declarations in the 2024 statement cohort for rolled over participants that need to assessed.
--- These declarations will be assessed against the 2021 & 2024 banding qualifiers based on the declaration type to provide 2 bandings that the SRM team will then use to determine any financial adjustment required.
manual_adjustment_declarations AS (
  SELECT
    PARSE_DATE('%B %Y', statements.name) AS statement_date
    ,declarations.declaration_id
    ,declarations.declaration_type
    ,declarations.state
    ,declarations.cpd_lead_provider_name
    ,declarations.cpd_delivery_partner_name
    ,declarations.participant_profile_id
    ,declarations.participant_course
    ,declarations.user_id
  FROM
    ${ref('ecf_declarations')} AS declarations
  LEFT JOIN
    `dataform.statements_latest_cpd` statements
  ON
    statements.id = declarations.statement_id
  WHERE
    declarations.statement_cohort = 2024
    AND
    declarations.cohort_rolled_over_21_24 = TRUE
)

-- Create the output and assign the banding values based on the qualifer for 2021 & 2024.
SELECT
   bandings_2021.banding_qualifier AS banding_qualifier_2021
  ,targets_2021.target AS target_2021
  ,CASE
    WHEN bandings_2021.banding_qualifier >= targets_2021.target THEN 'D'
    WHEN bandings_2021.banding_qualifier > 4000 THEN 'C'
    WHEN bandings_2021.banding_qualifier > 2000 THEN 'B'
    WHEN bandings_2021.banding_qualifier > 0 THEN 'A'
    ELSE NULL
   END AS banding_2021
  ,bandings_2024_ext.cumulative_banding_qualifier AS banding_qualifer_2024
  ,CASE
    WHEN bandings_2024_ext.cumulative_banding_qualifier > 4000 THEN 'C'
    WHEN bandings_2024_ext.cumulative_banding_qualifier > 2000 THEN 'B'
    WHEN bandings_2024_ext.cumulative_banding_qualifier > 0 THEN 'A'
    ELSE NULL
   END AS banding_2024
  ,CASE 
    WHEN mad.statement_date >= CURRENT_DATE() AND mad.statement_date = MIN(mad.statement_date) OVER(PARTITION BY mad.statement_date) THEN TRUE
    ELSE FALSE
   END AS is_current_statement
  ,mad.*
FROM
  manual_adjustment_declarations mad
LEFT JOIN
  bandings_2021
ON
  bandings_2021.cpd_lead_provider_name = mad.cpd_lead_provider_name
  AND
  bandings_2021.declaration_type = mad.declaration_type
LEFT JOIN
  bandings_2024_ext
ON
  bandings_2024_ext.cpd_lead_provider_name = mad.cpd_lead_provider_name
  AND
  bandings_2024_ext.declaration_type = mad.declaration_type
  AND
  bandings_2024_ext.statement_date = mad.statement_date
LEFT JOIN
  targets_2021
ON
  targets_2021.cpd_lead_provider_name = mad.cpd_lead_provider_name