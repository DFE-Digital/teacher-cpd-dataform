config {
    type: "table",
    assertions: {
        uniqueKey: ["induction_record_id"]
    },
    bigquery: {
        partitionBy: "DATE(created_at)",
        clusterBy: ["cohort"]
    },
    description: "This mart pulls together all ECT induction records generated within May - October (the wider 'registration' period) from 2022 onwards and pairs them with the details of the mentor they were assigned to. It feeds into the Looker Studio 2024 ECF Registration Dashboard and informs ECT metrics. Induction records outside of the registration window are excluded because they don't reflect activity that occurred in registration. There are three marts that inform participants registered within the annual registration windows: ECT_inductions, Mentor_inductions and Participant_inductions. There are three as they have different fields and cannot be amalgamated into a single mart. They utilise a similar structure logic and are dependent on induction records",
    columns: {
        induction_record_id: "ID of individual induction record",
        participant_profile_id: "Participant profiles are automatically generated for ECTs/Mentors when induction tutors register the ECT/Mentor details. Meaning a participant_profile_id (and full participant_profile) should be available for each ECF participant with an induction record. ECF participants have one participant_profile for each type of participation (ECT or Mentor).",
        participant_course: "Type of ECF Participant",
        cohort: "The cohort/academic year corresponding to when the participant started their course. Possible fields: 2022 onwards in this mart.",
        user_id: "This comes from the teacher profile associated with the participant profile via induction records.",
        school_id: "ID of the participant's school.",
        schedule_identifier: "This indicates which sub-cohort or tranche the participant commenced training within an annual cohort. For ECF, the schedule identifier also indicates if a participant is following a non-standard training route at any point (e.g. extended or reduced).",
        mentor_id: "The participant_profile_id of an ECT's mentor. This field is always NULL for mentors.",
        created_at: "The timestamp of when the underlying induction record was generated",
        start_date: "Start date for this induction record",
        end_date: "End date for this induction record. This is not the completion date for a participant's full induction.",
        school_transfer: "TRUE if a participant has transferred out of/in to the school in that induction record.",
        previous_school_id: "School ID from the preceding induction record for the participant",
        induction_status: "A status value used to manage the state of an induction record. It can indicate that a record is the active record or that something has changed and the record is not the active record (or will not be in the future). Potential values: active, changed, leaving, withdrawn ",
        training_status: "This is managed on the lead provider side and indicates whether the participant is being trained by a provider or not. Potential Values: active, deferred, withdrawn",
        completion_date: "The date an ECT completed their induction.",
        reg_year: "The registration year of the induction record",
        ect_21: "TRUE/FALSE flag that checks if this ECT was rolled over from 2021 to 2024",
        mentor_cohort: "The cohort of the associated mentor of the ECT",
        mentor_completion_date: "The date the corresponding mentor of the ECT completed their training",
        mentor_21: "TRUE/FALSE flag that checks if the corresponding mentor was rolled over from 2021 to 2024",
        min_created_record: "TRUE/FALSE flag that checks if this induction record was the first created for the participant + school combination in a given registration year",
        max_created_record: "TRUE/FALSE flag that checks if this induction record was the last created for the participant + school combination in a given registration year",
        transfer_in: "TRUE/FALSE flag that checks if the induction record has a different school_id than the prior induction record and the record is flagged as a transfer record, identifying this participant having transferred to a new school",
        matched_cohort_reg_year: "TRUE/FALSE flag that checks if the registration year of the induction record matches the cohort of the participant confirming this is a new participant in this year",
        assigned_mentor_status: "Checks if a mentor has been assigned to the participant",
        mentor_type: "Classification of the type of mentor assigned to the ECT, checking where the mentor is in their training and which cohort they come from. Values are either: No Mentor Assigned, Completed Mentor, Mentor training in prior cohort, Mentor from same cohort",
        adjusted_creation_date: "This shifts the creation date of the induction record forward to the beginning of registration of a given year: 2022 - 10/05/2022, 2023 - 05/06/2023, 2024 - 17/06/2024"
    }
}

WITH
  -- #This table generates a list of the dates from May - October in each approximate registration window (May - October) #
  registration_dates AS (
SELECT
  *
FROM (
  SELECT
    DISTINCT(start_year) AS reg_year,
    CAST(CONCAT(start_year,'-05-01') AS date) AS reg_start_date,
    CAST(CONCAT(start_year,'-11-30') AS date) AS reg_end_date
  FROM
    ${ref("cohorts_latest_ecf1")}
  WHERE
    start_year != 2021) AS start_years
CROSS JOIN
  UNNEST( GENERATE_DATE_ARRAY(reg_start_date, reg_end_date, INTERVAL 1 DAY) ) AS join_date),
  --   # This query uses an inner join between ecf_inductions and the registration dates above, the join automatically filters induction records to only those generated during the periods set out above. The records are filtered to ECTs only #
  ect_inductions_reg_period AS (
SELECT
  inductions.*,
  reg_dates.*
FROM
  ${ref("ecf_inductions")} inductions
INNER JOIN
  registration_dates reg_dates
ON
  DATE(inductions.created_at) =reg_dates.join_date
WHERE
  participant_type ='ParticipantProfile::ECT'
ORDER BY
  join_date DESC,
  participant_profile_id DESC),
  --   # This query pulls key fields for mentors from their latest induction record so that we can categorize the type of mentors ECTs are assigned to. #
  mentor_profiles AS (
SELECT
  participant_profile_id,
  mentor_completion_date,
  cohort,
  cohort_rolled_over_21_24
FROM
   ${ref("ecf_inductions_dedupe")} dedupe),
  -- # This table joins ECT inductions records with their corresponding associated mentor's details.  #
  ect_reg_with_mentors AS (
SELECT
  ects.induction_record_id,
  ects.participant_profile_id,
  'ECT' AS participant_course,
  ects.cohort,
  ects.user_id,
  ects.school_id,
  ects.schedule_identifier,
  ects.mentor_id,
  ects.created_at,
  ects.start_date,
  ects.end_date,
  ects.school_transfer,
  --   # This window statement pull the previous induction record prior to this induction record being generated to determine the school_id of the prior record#
  LEAD(ects.school_id) OVER (PARTITION BY ects.participant_profile_id ORDER BY ects.join_date DESC) AS previous_school_id,
  ects.induction_status,
  ects.training_status,
  ects.completion_date,
  ects.reg_year,
  --   # This translates the null values from the field into falses to permit the use of booleans in dashboards#
  CASE
    WHEN ects.cohort_rolled_over_21_24 IS NULL THEN FALSE
    ELSE ects.cohort_rolled_over_21_24
END
  AS ect_21,
  mentors.cohort AS mentor_cohort,
  mentors.mentor_completion_date AS mentor_completion_date,
  --   # This translates the null values from the field into falses to permit the use of booleans in dashboards#
  CASE
    WHEN mentors.cohort_rolled_over_21_24 IS NULL THEN FALSE
    ELSE mentors.cohort_rolled_over_21_24
END
  AS mentor_21
FROM
  ect_inductions_reg_period ects
LEFT JOIN
  mentor_profiles mentors
ON
  ects.mentor_id = mentors.participant_profile_id)
  -- # This adds flags to the final output that can be filtered on in the looker studio dashboard#
SELECT
  *,
  -- #This checks if this ECT induction record is the first induction record for a given participant within the school + reg_year combination#
  CASE
    WHEN MIN(created_at) OVER (PARTITION BY participant_profile_id, school_id, reg_year) = created_at THEN TRUE
    ELSE FALSE
END
  AS min_created_record,
  -- #This checks if this ECT induction record is the last induction record for a given participant within the + school + reg_year combination#
  CASE
    WHEN MAX(created_at) OVER (PARTITION BY participant_profile_id, school_id, reg_year) = created_at THEN TRUE
    ELSE FALSE
END
  AS max_created_record,
  -- #This checks if this ECT induction record represents transferring into a new school because this record has a different school_id than previous induction record had#
  CASE
    WHEN previous_school_id != school_id AND school_transfer IS TRUE THEN TRUE
    ELSE FALSE
END
  AS transfer_in,
  -- #This checks if this ECT induction record falls within the registration period that aligns with their cohort, filters are in place in the looker studio dashboard to weed out cases where they are participants that have rolled over from 2021#
  CASE
    WHEN cohort = reg_year THEN TRUE
    ELSE FALSE
END
  AS matched_cohort_reg_year,
  CASE
    WHEN mentor_id IS NULL THEN 'No Mentor Assigned'
    ELSE 'Mentor Assigned'
END
  AS assigned_mentor_status,
  -- #This case statement determines the kind of mentor an ECT has and whether the mentor is part of a prior cohort or finished training before this ECT induction record was generated#
  CASE
    WHEN mentor_id IS NULL THEN 'No Mentor Assigned'
    WHEN mentor_completion_date IS NOT NULL
  AND mentor_completion_date < DATE(created_at) THEN 'Completed Mentor'
    WHEN mentor_21 IS TRUE THEN 'Mentor training in prior cohort'
    WHEN mentor_cohort = cohort THEN 'Mentor from same cohort'
    ELSE 'Mentor training in prior cohort'
END
  AS mentor_type,
  -- #This moves the created at date into the relevant exact registration windows for that year#
  CASE
    WHEN created_at < '2022-05-10' AND reg_year = 2022 THEN '2022-05-10'
    WHEN created_at < '2023-06-05'
  AND reg_year = 2023 THEN '2023-06-05'
    WHEN created_at < '2024-06-17' AND reg_year = 2024 THEN '2024-06-17'
    WHEN created_at < '2025-06-16' AND reg_year = 2025 THEN '2025-06-16'
    ELSE CAST(created_at AS date)
END
  AS adjusted_creation_date
FROM
  ect_reg_with_mentors
