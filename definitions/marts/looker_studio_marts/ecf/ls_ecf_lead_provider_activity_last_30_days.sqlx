config {
    type: "table",
    bigquery: {
        partitionBy: "event_date",
        clusterBy: ["lead_provider_name"]
    },
    description: "This mart provides a table of lead provider activity in the last 30 days from the current date on key themes. These themes are; declarations submitted, declarations voided, partnerships created, partnerships changed, participants withdrawn, deferred or resumed and participant schedule changes.",
    columns: {
      event_date: "The date being used to aggregate activity by lead provider.",
      lead_provider_name: "The name of the lead provider who performed the action.",
      declaration_id: "The declaration ID of the submitted declaration. A distinct count of this field determines the number of declarations submitted on the event date by the lead provider.",
      declaration_created_at_date: "The created at date for the submitted declaration. This is the date used to join on the event date.",
      course_identifier: "The course identifier related to the submitted declaration.",
      declaration_date: "The date on which the submitted declaration was evidenced.",
      declaration_type: "The declaration type of the submitted declaration.",
      state: "The declaration state of the submitted declaration.",
      participant_profile_id: "The participant profile ID associated with the submitted declaration.",
      cpd_lead_provider_name: "The lead provider name associated with the submitted declaration.",
      cohort: "The academic cohort of the participant associated with the submitted declaration.",
      voided_declaration_id: "The declaration ID for the declaration updated vai the void API. A distinct count of this field determines the number of voided declarations that occurred on the event date by the lead provider.",
      voided_declaration_request_uuid: "The API request ID of the change being made.",
      voided_declaration_key_updated: "The field on the participant_declarations table being amended via the void declaration API call.",
      voided_declaration_new_value: "The new value for the field (key_updated) that was changed via this API request.",
      voided_declaration_previous_value: "The previous value for the field (key_updated) that was changed via this API request.",
      withdrawal_request_uuid: "The API request ID for the change being made to a participant's training status via the withdraw API. A distinct count of this field provides the number of withdrawal changes made on the event date by the lead provider.",
      withdrawal_participant_profile_id: "The participant profile ID for the participant whose training status was amended via the withdraw API request.",
      withdrawal_participant_key_updated: "The field being updated on the participant_profiles table via this API request. The value is always 'training_status'.",
      withdrawal_participant_new_value: "The new value for the field (key_updated) that was assigned via this API request.",
      withdrawal_participant_previous_value: "The previous value for the field (key_updated) that was changed via this API request.",
      deferral_request_uuid: "The API request ID for the change being made to a participant's training status via the defer API. A distinct count of this field provides the number of deferral changes made on the event date by the lead provider.",
      deferral_participant_profile_id: "The participant profile ID for the participant whose training status was amended via the defer API request.",
      deferral_participant_key_updated: "The field being updated on the participant_profiles table via this API request. The value is always 'training_status'.",
      deferral_participant_new_value: "The new value for the field (key_updated) that was assigned via this API request.",
      deferral_participant_previous_value: "The previous value for the field (key_updated) that was changed via this API request.",
      resume_request_uuid: "The API request ID for the change being made to a participant's training status via the resume API. A distinct count of this field provides the number of resume changes made on the event date by the lead provider.",
      resume_participant_profile_id: "The participant profile ID of the participant whose training status was changed via the resume API request made by the lead provider.",
      resume_participant_key_updated: "The field being updated on the participant_profiles table via this API request. The value is always 'training_status'.",
      resume_participant_new_value: "The new value for the field (key_updated) that was assigned via this API request.",
      resume_participant_previous_value: "The previous value for the field (key_updated) that was changed via this API request.",
      change_schedule_request_uuid: "The API request ID for the change being made to a participant's training status via the change-schedule API. A distinct count of this field provides the number of schedule changes made on the event date by the lead provider.",
      change_schedule_participant_profile_id: "The participant profile ID of the participant whose schedule was changed via this API request from the Lead Provider.",
      change_schedule_key_updated: "The field being updated on the participant_profiles table via this API request. The value is always 'schedule_id'.",
      change_schedule_new_value: "The new value for the field (key_updated) that was assigned via this API request.",
      change_schedule_previous_value: "The previous value for the field (key_updated) that was changed via this API request.",
      partnership_creation_partnership_id: "The partnership ID for the partnership created by the lead provider on the event date. Only partnerships where relationship = False are included. A distinct count of this field provides the number of partnerships created by the lead provider on the event date.",
      partnership_creation_request_uuid: "The API request ID for the creation of this partnership.",
      partnership_creation_cohort: "The academic cohort the partnership relates to.",
      partnership_change_request_uuid: "The API request ID for the change being made to a partnership via the partnerships/ecf API. A distinct count of this field provides the number of partnership changes to delivery_partner_id on the event date by the lead provider.",
      partnership_change_key_updated: "The field being updated on the partnerships table via this API request. The value is always 'delivery_partner_id'.",
      partnership_change_new_value: "The new value for the field (key_updated) that was assigned via this API request.",
      partnership_change_previous_value: "The previous value for the field (key_updated) that was changed via this API request."
    }
}

WITH last_30_days AS (
  SELECT 
    event_date
  FROM
    UNNEST(GENERATE_DATE_ARRAY(CURRENT_DATE()-30, CURRENT_DATE())) AS event_date
),

lead_providers AS (
  SELECT
    name AS lead_provider_name
  FROM
    ${ref('cpd_lead_providers_latest_cpd')}
  WHERE
    -- Exclude non-current ECF Lead Providers
    name NOT IN ('Capita', 'Teacher Development Trust', 'LLSE', 'Church of England', 'School-Led Network')
  GROUP BY
    name
),

api_user_mapping AS (
  SELECT
     '22727fdc-816a-4a3c-9675-030e724bbf89' AS request_user_id
    ,'Ambition Institute' AS request_user_name
  UNION ALL
  SELECT
     '24cdd065-4eb9-455a-8107-2ffb125f399f' AS request_user_id
    ,'Teacher Development Trust' AS request_user_name
  UNION ALL
  SELECT
     '3b3fab47-231f-43fe-bcec-98960a60acae' AS request_user_id
    ,'Church of England' AS request_user_name
  UNION ALL
  SELECT
     '3dad03a0-08a5-4bf3-a9c9-082b7f4e78d4' AS request_user_id
    ,'School-Led Network' AS request_user_name
  UNION ALL
  SELECT
     '51ff9a95-3f48-4117-8466-4cd5b91fcd5c' AS request_user_id
    ,'National Institute of Teaching' AS request_user_name
  UNION ALL
  SELECT
     '522a0342-e8d2-46fc-aaa3-716fa6e35751' AS request_user_id
    ,'LLSE' AS request_user_name
  UNION ALL
  SELECT
     '9ad41410-677f-4da3-86a1-cda62b42e176' AS request_user_id
    ,'Capita' AS request_user_name
  UNION ALL
  SELECT
     'af89cf02-bbe0-423b-b2f6-bb2dbb97d141' AS request_user_id
    ,'Education Development Trust' AS request_user_name
  UNION ALL
  SELECT
     'bd152c5a-5ef4-4584-9c63-c32877dbba07' AS request_user_id
    ,'Best Practice Network' AS request_user_name
  UNION ALL
  SELECT
     'fb9c56b2-252b-41fe-b6b2-ebf208999df9' AS request_user_id
    ,'UCL Institute of Education' AS request_user_name
  UNION ALL
  SELECT
     'bd152c5a-5ef4-4584-9c63-c32877dbba07' AS request_user_id
    ,'Teach First' AS request_user_name

),

table_foundation AS (
  SELECT 
    event_date
    ,lead_provider_name
  FROM 
    last_30_days
  CROSS JOIN
    lead_providers
),

ecf_declarations AS (
  SELECT
     declarations.id AS declaration_id
    ,DATE(declarations.created_at) AS declaration_created_at_date
    ,declarations.course_identifier
    ,DATE(declarations.declaration_date) AS declaration_date
    ,declarations.declaration_type
    ,declarations.state
    ,declarations.participant_profile_id
    ,lp.name AS cpd_lead_provider_name
    ,cohorts.start_year AS cohort
  FROM
    ${ref('participant_declarations_latest_cpd')} AS declarations
  LEFT JOIN
    ${ref('cpd_lead_providers_latest_cpd')} AS lp
  ON
    lp.id = declarations.cpd_lead_provider_id
  LEFT JOIN
    ${ref('cohorts_latest_cpd')} AS cohorts
  ON  
    cohorts.id = declarations.cohort_id
  WHERE
    DATE(declarations.created_at) BETWEEN CURRENT_DATE()-30 AND CURRENT_DATE()
    AND
    (type LIKE '%ECF' OR type LIKE '%Mentor')
),

voided_declarations AS (
  SELECT
     entity_id AS declaration_id
    ,DATE(occurred_at) AS occurred_at_date
    ,request_uuid
    ,request_path
    ,declarations.request_user_id
    ,api_user_mapping.request_user_name
    ,key_updated
    ,new_value
    ,previous_value
  FROM
    ${ref('participant_declarations_field_updates_cpd')} AS declarations
  LEFT JOIN
    api_user_mapping
  ON
    api_user_mapping.request_user_id = declarations.request_user_id
  WHERE
    DATE(occurred_at) BETWEEN CURRENT_DATE()-30 AND CURRENT_DATE()
    AND
    request_path LIKE '%void'
    AND
    (type LIKE '%ECF' OR type LIKE '%Mentor')
),

profile_changes AS (
  SELECT 
     DATE(occurred_at) AS occurred_at_date
    ,request_uuid
    ,entity_id AS participant_profile_id
    ,request_path
    ,profiles.request_user_id
    ,api_user_mapping.request_user_name
    ,key_updated
    ,new_value
    ,previous_value
  FROM 
    ${ref('participant_profiles_field_updates_cpd')} AS profiles
  LEFT JOIN
    api_user_mapping 
  ON
    api_user_mapping.request_user_id = profiles.request_user_id
  WHERE 
    key_updated IN ('training_status', 'schedule_id')
    AND
    DATE(occurred_at) BETWEEN CURRENT_DATE()-30 AND CURRENT_DATE()
    AND
    response_status = '200'
    AND
    (type LIKE '%ECF' OR type LIKE '%Mentor')
),

partnership_creations AS (
  SELECT
     partnerships.id AS partnership_id
    ,DATE(partnerships.created_at) AS created_at_date
    ,partnerships.request_uuid
    ,partnerships.request_path
    ,partnerships.request_user_id
    ,api_user_mapping.request_user_name
    ,cohorts.start_year AS cohort
    ,ROW_NUMBER() OVER(PARTITION BY partnerships.id, DATE(partnerships.created_at) ORDER BY partnerships.created_at DESC) AS rn0
  FROM
    ${ref('partnerships_version_cpd')} AS partnerships
  LEFT JOIN 
    api_user_mapping
  ON
    api_user_mapping.request_user_id = partnerships.request_user_id
  LEFT JOIN
    ${ref('cohorts_latest_cpd')} AS cohorts
  ON
    cohorts.id = partnerships.cohort_id
  WHERE
    partnerships.relationship = FALSE
    AND
    DATE(partnerships.created_at) BETWEEN CURRENT_DATE()-30 AND CURRENT_DATE()
    AND
    partnerships.request_path LIKE'%partnerships/ecf%'
  QUALIFY(
    rn0 = 1
  )
),

partnership_changes AS (
  SELECT 
     DATE(occurred_at) AS occurred_at_date
    ,request_uuid
    ,entity_id AS partnership_id
    ,request_path
    ,partnerships.request_user_id
    ,api_user_mapping.request_user_name
    ,key_updated
    ,new_value
    ,previous_value
  FROM 
    ${ref('partnerships_field_updates_cpd')} AS partnerships
  LEFT JOIN
    api_user_mapping
  ON
    api_user_mapping.request_user_id = partnerships.request_user_id
  WHERE
    DATE(occurred_at) BETWEEN CURRENT_DATE()-30 AND CURRENT_DATE()
    AND
    response_status = '200'
    AND
    key_updated = 'delivery_partner_id'
    AND
    request_path LIKE '%partnerships%'
)

SELECT
   table_foundation.*
  ,ecf_declarations.*
  ,voided_declarations.declaration_id AS voided_declaration_id
  ,voided_declarations.request_uuid AS voided_declaration_request_uuid
  ,voided_declarations.key_updated AS voided_declaration_key_updated
  ,voided_declarations.new_value AS voided_declaration_new_value
  ,voided_declarations.previous_value AS voided_declaration_previous_value
  ,ROW_NUMBER() OVER(PARTITION BY voided_declarations.request_uuid, event_date) AS voided_declaration_rn
  ,withdrawals.request_uuid AS withdrawal_request_uuid
  ,withdrawals.participant_profile_id AS withdrawal_participant_profile_id
  ,withdrawals.key_updated AS withdrawal_participant_key_updated
  ,withdrawals.new_value AS withdrawal_participant_new_value
  ,withdrawals.previous_value AS withdrawal_participant_previous_value
  ,ROW_NUMBER() OVER(PARTITION BY withdrawals.request_uuid, event_date) AS withdrawal_participant_rn
  ,deferrals.request_uuid AS deferral_request_uuid
  ,deferrals.participant_profile_id AS deferral_participant_profile_id
  ,deferrals.key_updated AS deferral_participant_key_updated
  ,deferrals.new_value AS deferral_participant_new_value
  ,deferrals.previous_value AS deferral_participant_previous_value
  ,ROW_NUMBER() OVER(PARTITION BY deferrals.request_uuid, event_date) AS deferral_participant_rn
  ,resumes.request_uuid AS resume_request_uuid
  ,resumes.participant_profile_id AS resume_participant_profile_id
  ,resumes.key_updated AS resume_participant_key_updated
  ,resumes.new_value AS resume_participant_new_value
  ,resumes.previous_value AS resume_participant_previous_value
  ,ROW_NUMBER() OVER(PARTITION BY resumes.request_uuid, event_date) AS resume_participant_rn
  ,schedule_changes.request_uuid AS change_schedule_request_uuid
  ,schedule_changes.participant_profile_id AS change_schedule_participant_profile_id
  ,schedule_changes.key_updated AS change_schedule_key_updated
  ,schedule_changes.new_value_name AS change_schedule_new_value
  ,schedule_changes.previous_value_name AS change_schedule_previous_value
  ,ROW_NUMBER() OVER(PARTITION BY schedule_changes.request_uuid, event_date) AS schedule_change_rn
  ,partnership_creations.partnership_id AS partnership_creation_partnership_id
  ,partnership_creations.request_uuid AS partnership_creation_request_uuid
  ,partnership_creations.cohort AS partnership_creation_cohort
  ,partnership_changes.request_uuid AS partnership_change_request_uuid
  ,partnership_changes.key_updated AS partnership_change_key_updated
  ,partnership_changes.new_value AS partnership_change_new_value
  ,partnership_changes.previous_value AS partnership_change_previous_value
  ,ROW_NUMBER() OVER(PARTITION BY partnership_changes.request_uuid, event_date) AS partnership_change_rn
FROM
  table_foundation
LEFT JOIN
  ecf_declarations
ON
  table_foundation.lead_provider_name = ecf_declarations.cpd_lead_provider_name
  AND
  table_foundation.event_date = ecf_declarations.declaration_created_at_date
LEFT JOIN
  voided_declarations 
ON
  voided_declarations.occurred_at_date = table_foundation.event_date
  AND
  voided_declarations.request_user_name = table_foundation.lead_provider_name
LEFT JOIN
  profile_changes AS withdrawals
ON
  withdrawals.occurred_at_date = table_foundation.event_date
  AND
  withdrawals.request_user_name = table_foundation.lead_provider_name
  AND
  withdrawals.request_path LIKE '%withdraw'
LEFT JOIN
  profile_changes AS deferrals
ON
  deferrals.occurred_at_date = table_foundation.event_date
  AND
  deferrals.request_user_name = table_foundation.lead_provider_name
  AND
  deferrals.request_path LIKE '%defer'
LEFT JOIN
  profile_changes AS resumes
ON
  resumes.occurred_at_date = table_foundation.event_date
  AND
  resumes.request_user_name = table_foundation.lead_provider_name
  AND
  resumes.request_path LIKE '%resume'
LEFT JOIN (
  SELECT
     profile_changes.*
    ,new_schedules.name AS new_value_name
    ,prev_schedules.name AS previous_value_name
  FROM
    profile_changes
  LEFT JOIN
    ${ref('schedules_latest_cpd')} AS new_schedules
  ON
    new_schedules.id = profile_changes.new_value
  LEFT JOIN
    ${ref('schedules_latest_cpd')} AS prev_schedules
  ON
    prev_schedules.id = profile_changes.previous_value
  WHERE
    profile_changes.request_path LIKE '%change-schedule'
  ) AS schedule_changes
ON
  schedule_changes.occurred_at_date = table_foundation.event_date
  AND
  schedule_changes.request_user_name = table_foundation.lead_provider_name
LEFT JOIN
  partnership_creations
ON
  partnership_creations.created_at_date = table_foundation.event_date
  AND
  partnership_creations.request_user_name = table_foundation.lead_provider_name
LEFT JOIN 
  partnership_changes
ON
  partnership_changes.occurred_at_date = table_foundation.event_date
  AND
  partnership_changes.request_user_name = table_foundation.lead_provider_name