config {
    type: "table",
    bigquery: {
        partitionBy: "DATE(occurred_at)",
        clusterBy: ["lead_provider_name", "state", "voided_by_finance_tool", "finance_cohort_name"]
    },
    description: "",
    columns: {
        occurred_at: "",
        declaration_id: "",
        state: "",
        voided_at: "",
        voided_by_user_id: "",
        cpd_lead_provider_id: "",
        participant_profile_id: "",
        finance_cohort_id: "",
        finance_cohort_name: "",
        lead_provider_name: "",
        voided_by_finance_tool: "",
        statement_cohort: ""
    }
}
    -- Getting all participant declarations in state clawed_back or awaiting_clawback
  WITH
    voided_paid_declarations AS (
    SELECT
      occurred_at,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'id') AS declaration_id,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'declaration_type') AS declaration_type,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'state') AS state,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'voided_at') AS voided_at,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'voided_by_user_id') AS voided_by_user_id,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'cpd_lead_provider_id') AS cpd_lead_provider_id,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'participant_profile_id') AS participant_profile_id,
      (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'course_identifier') AS course_identifier
    FROM
      ${ref('events')}
    WHERE
      event_type = 'update_entity'and entity_table_name = 'participant_declarations'
      AND (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'state') IN ('clawed_back',
        'awaiting_clawback')
      AND (
      SELECT
        value[SAFE_OFFSET(0)]
      FROM
        UNNEST(DATA)
      WHERE
        KEY = 'course_identifier') IN ('ecf-induction',
        'ecf-mentor')
      QUALIFY
        ROW_NUMBER() OVER (PARTITION BY declaration_id ORDER BY occurred_at DESC )=1 ),
      most_recent_statement AS (
      SELECT
        participant_declaration_id,
        statement_id,
        name
      FROM (
        SELECT
          stat_line_items.*,
          stat_names.name
          --   FROM `dataform.statement_line_items_latest_cpd` as stat_line_items
        FROM
          ${ref('statement_line_items_latest_cpd')} AS stat_line_items
        LEFT JOIN
          ${ref('statements_latest_cpd')} AS stat_names
        ON
          stat_line_items.statement_id = stat_names.id )
      QUALIFY
        ROW_NUMBER() OVER (PARTITION BY participant_declaration_id ORDER BY created_at DESC)=1 )
    SELECT
      vpd.*,
      mrs.statement_id AS finance_cohort_id,
      mrs.name AS finance_cohort_name,
      lp_latest.name AS lead_provider_name,
      ls_declarations.statement_cohort AS statement_cohort,
    IF
      (voided_at IS NOT NULL
        AND voided_by_user_id IS NOT NULL, TRUE, FALSE) AS voided_by_finance_tool
    FROM
      voided_paid_declarations AS vpd
    LEFT JOIN
      most_recent_statement AS mrs
    ON
      vpd.declaration_id=mrs.participant_declaration_id
    LEFT JOIN
      ${ref(`cpd_lead_providers_latest_cpd`)} AS lp_latest
    ON
      vpd.cpd_lead_provider_id = lp_latest.id
    LEFT JOIN (
      SELECT
        *
      FROM
        ${ref('ls_declarations_provider_names')}
      WHERE
        programme = 'ECF') AS ls_declarations
    ON
      vpd.declaration_id = ls_declarations.id

