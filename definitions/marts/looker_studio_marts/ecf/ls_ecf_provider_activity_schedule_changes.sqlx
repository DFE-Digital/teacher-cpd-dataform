config {
    type: "table",
    bigquery: {
        partitionBy: "event_date",
        clusterBy: ["cpd_lead_provider_name"]
    },
    description: "This mart contains successful (200 status code) API requests made by a Lead Provider on the API path ending in 'change-schedule' to change a participants schedule_id on their participant profile. Schedule changes can trigger cohort changes based upon the cohort_id associated with the new schedule_id. \n \
	This mart includes changes where the occurred_at date is in the last 180 days only. \n \
	The purpose of this mart is to support ECF Contract Management in monitoring Lead Provider made changes, namely, the changing of a participants schedule & possibly cohort. \n \
	The data within this mart will be used in the ECF Contract Management Dashboard to provide a high level count of changes made by the Lead Provider on an Event Date as well as key information that can assist in their conversations with LPs.",
    columns: {
      event_date: "The date the change was made in the service. This is called occurred_at in the source data table and renamed to event_date in the mart.",
      event_date_delta: "The number of days between the event_date and the current date.",
      cpd_lead_provider_name: "The name of the lead provider who performed the action. This is determined by the request_user_id which is captured in the service and mapped against the cpd_lead_provider_id in cpd_lead_providers_latest. This connection has been confirmed as correct by LPDOB.",
	  request_uuid: "The unique identifier for the API request that triggered the change to the participant's schedule_id. This UUID is only usable by LPDOB or developers if the request needs to be reviewed. In this mart this value is unique and a distinct count of this field is used to determine how many actions of this type have been conducted by a lead provider on the event date.",
	  participant_profile_id: "The participant profile ID of the participant whose schedule has been changed.",
	  user_id: "The user ID taken from the teacher profile associated with the participant profile.",
	  participant_type: "The type of the participant whose schedule has been changed. The value can be either ECT or Mentor.",
	  request_path: "The full API path used by the lead provider to change the participant's schedule. The path contains the user_id but always ends with 'change-schedule'.",
	  key_updated: "The name of the field in the table participant_profiles_latest_ecf1 that was changed by the API request. This is always schedule_id as that is the only field a lead provider can amend via the 'change-schedule' API path.",
	  new_schedule: "The new value for the schedule_id field on the participant profile translated into text via schedules_latest_ecf1.",
	  new_cohort: "The cohort associated with the new schedule. Even if the cohort has not changed this field will be populated with the cohort that is associated with the new schedule.",
	  previous_schedule: "The previous value for the schedule_id field on the participant profile translated into text via schedules_latest_ecf1.",
	  previous_cohort: "The cohort associated with the previous schedule. Even if the cohort has not changed this field will be populated with the cohort that is associated with the previous schedule."
    }
}

-- Gather ECF Induction Records to be able to join User ID, Participant Type & Cohort onto participants within the script without needing to join on Participant Profiles and Teacher Profiles separately.
WITH ecf_inductions AS(
  SELECT
     induction_record_id
    ,participant_profile_id
    ,participant_type
    ,user_id
    ,cohort
    ,created_at
    ,DATETIME(start_date) AS start_datetime
    ,DATE(start_date) AS start_date
    ,IFNULL(DATETIME(end_date), DATETIME(2050,12,31,00,00,00)) AS end_datetime
    ,IFNULL(DATE(end_date), DATE(2050,12,31)) AS end_date
  FROM
    ${ref('ecf_inductions')}
)

-- Gather Schedule Changes made via the API by Lead Providers. These API changes impact the participant profile and as such we take the information from the field changes made to this table. Schedule changes can trigger cohort changes and in this CTE we capture both values in their new and previous states.
SELECT 
   DATE(occurred_at) AS event_date
  ,DATE_DIFF(CURRENT_DATE(), DATE(occurred_at), DAY) AS event_date_delta
  ,lead_providers.name AS cpd_lead_provider_name
  ,request_uuid
  ,entity_id AS participant_profile_id
  ,ecf_inductions.user_id
  ,ecf_inductions.participant_type AS participant_type
  ,request_path 
  ,key_updated
  ,new_schedules.schedule_name AS new_schedule
  ,new_schedules.cohort AS new_cohort
  ,prev_schedules.schedule_name AS previous_schedule
  ,prev_schedules.cohort AS previous_cohort
FROM 
 ${ref('participant_profiles_field_updates_ecf1')} AS profiles
-- Join on ecf_inductions CTE and de-duplicate where multiple induction records are valid around the date of the event. We use the last record valid on the date.
LEFT JOIN
  ecf_inductions
ON
  ecf_inductions.participant_profile_id = profiles.entity_id
  AND
  DATE(profiles.occurred_at) BETWEEN ecf_inductions.start_date AND ecf_inductions.end_date
LEFT JOIN
  ${ref('cpd_lead_providers_latest_ecf1')} AS lead_providers
ON
  lead_providers.id = profiles.request_user_id
-- Join on Schedules to convert the new & previous values from the field updates into the schedule & cohort names
LEFT JOIN
  (
    SELECT
       schedules.id
      ,schedules.name AS schedule_name
      ,cohorts.start_year AS cohort
    FROM
      ${ref('schedules_latest_ecf1')} AS schedules
    LEFT JOIN
      ${ref('cohorts_latest_ecf1')} AS cohorts
    ON
      cohorts.id = schedules.cohort_id
  ) AS new_schedules
ON
  new_schedules.id = profiles.new_value
LEFT JOIN
  (
    SELECT
       schedules.id
      ,schedules.name AS schedule_name
      ,cohorts.start_year AS cohort
    FROM
      ${ref('schedules_latest_ecf1')} AS schedules
    LEFT JOIN
      ${ref('cohorts_latest_ecf1')} AS cohorts
    ON
      cohorts.id = schedules.cohort_id
  ) AS prev_schedules
ON
  prev_schedules.id = profiles.previous_value
WHERE 
  key_updated = 'schedule_id'
  AND
  request_path LIKE '%change-schedule'
  AND
  type NOT LIKE '%NPQ'
  AND
  DATE(occurred_at) BETWEEN CURRENT_DATE()-180 AND CURRENT_DATE()
QUALIFY
  ROW_NUMBER() OVER(PARTITION BY request_uuid ORDER BY ecf_inductions.start_datetime DESC, ecf_inductions.end_datetime DESC) = 1