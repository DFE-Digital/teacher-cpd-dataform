config {
    type: "table",
    assertions: {
        uniqueKey: ["id"]
    },
    bigquery: {
        partitionBy: "DATE(declaration_date)",
        clusterBy: ["cohort", "statement_cohort", "suggested_cohort_from_declaration", "check_source"]
    },
    description: "This mart creates a list of all declarations for a participant where one of the participant's declarations doesn't align with the participant's cohort. The mart includes a static file that we use to exclude declarations where a statement cohort mismatch is known but the statements are closed so no action will be taken.",
    columns: {
        id: "ID of declaration",
        created_at: "Timestamp when the declaration was created.",
        updated_at: "Timestamp of when any updates occured to the declaration.",
        course_identifier: "Identifier for ECF or NPQ course declaration is associated with.",
        cpd_lead_provider_id: "ID of Lead Provider that has made the declaration.",
        declaration_date: "Date evidence was received.",
        declaration_type: "The name of the stage the declaration has been made against.",
        delivery_partner_id: "ID of the ECF Delivery Partner associated with the Lead Provider-participant combo.",
        evidence_held: "Details any evidence provided with the declaration.",
        mentor_user_id: "User ID of the mentor associated with the declared-against ECT",
        participant_profile_id: "ID of the participant's profile.",
        pupil_premium: "Boolean for pupil premium eligibility.",
        sparsity_uplift: "Boolean for sparsity uplift eligibility.",
        state: "State of the declaration. Can be submitted, eligible, payable, paid, ineligible, voided, awaiting_clawback, and clawed_back.",
        superseded_by_id: "NEED PROPER DEFINITION",
        type: "Says if it belongs to either the ECF or NPQ programme.",
        user_id: "Used ID of the participant being declared against.",
        last_streamed_event_occurred_at: "Timestamp of when this record was most recently imported or updated.",
        last_streamed_event_type: "Whether the most recent event was this entity being imported or updated.",
        cohort: "Participant's cohort from either npq_enrolments or ecf_indcutions_dedupe.",
        schedule_identifier: "Participant's schedule from either npq_enrolments or ecf_indcutions_dedupe.",
        statement_cohort: "Cohort from the financial statement a declaration is stored against.",
        cpd_lp_name: "Name of Lead Provider for NPQ or ECF course",
        cpd_dp_name: "Name of Delivery Partner for ECF course",
        programme: "Shortening of 'type'. Says if it belongs to either the ECF or NPQ programme.",
        suggested_cohort_from_declaration: "Calculates where a declaration date falls in the declaration milestone window across an entire cohor and therefore the suggested cohort.",
        check_source: "Details which (if any) of the checks a declaration belongs to."
    }
}

WITH
  full_declaration_milestone_table AS (
    /*This section creates a list of all submitted/eligible/payable/paid declarations for a participant, pulls in details from their current induction record, and then joins on the two static tables ecf_schedule_milestone_mapping and ecf_schedule_milestone_mapping_condensed to later make comparisons against the declaration_date of each participant*/
    SELECT
      dec_cpd.id AS declaration_id,
      dec_cpd.user_id,
      dec_cpd.participant_profile_id,
      ecf_id.induction_record_id,
      ecf_id.cohort,
      ecf_id.schedule_identifier,
      ecf_id.school_urn,
      CASE
        WHEN participant_type LIKE 'ParticipantProfile::ECT' THEN 'ECT'
        WHEN participant_type LIKE 'ParticipantProfile::Mentor' THEN 'Mentor'
      ELSE
      NULL
    END
      AS participant_type,
      dec_cpd.course_identifier,
      dec_cpd.declaration_type,
      DATE(dec_cpd.declaration_date) AS dec_date_short,
      dec_cpd.state,
      dec_cpd.cpd_lp_name,
      dec_cpd.cpd_dp_name,
      schedule_milestones.started_dec_milestone_date,
      schedule_milestones.started_dec_start_date,
      schedule_milestones.ret1_dec_milestone_date,
      schedule_milestones.ret1_dec_start_date,
      schedule_milestones.ret2_dec_milestone_date,
      schedule_milestones.ret2_dec_start_date,
      schedule_milestones.ret3_dec_milestone_date,
      schedule_milestones.ret3_dec_start_date,
      schedule_milestones.ret4_dec_milestone_date,
      schedule_milestones.ret4_dec_start_date,
      schedule_milestones.completed_dec_milestone_date,
      schedule_milestones.completed_dec_start_date,
      sched_mile_cond.start_date_2021,
      sched_mile_cond.milestone_date_2021,
      sched_mile_cond.start_date_2022,
      sched_mile_cond.milestone_date_2022,
      sched_mile_cond.start_date_2023,
      sched_mile_cond.milestone_date_2023,
    FROM
      ${ref(`ls_declarations_provider_names`)} AS dec_cpd
    LEFT JOIN
      ${ref(`ecf_inductions_dedupe`)} AS ecf_id
    ON
      dec_cpd.participant_profile_id=ecf_id.participant_profile_id
    LEFT JOIN
      `static_tables.ecf_schedule_milestone_mapping` AS schedule_milestones
    ON
      ecf_id.schedule_identifier=schedule_milestones.schedule_identifier
      AND ecf_id.cohort=schedule_milestones.cohort
    LEFT JOIN
      `static_tables.ecf_schedule_milestone_mapping_condensed` AS sched_mile_cond
    ON
      dec_cpd.declaration_type=sched_mile_cond.declaration_type
    WHERE
      dec_cpd.course_identifier LIKE 'ecf%'
      AND dec_cpd.state IN ('submitted',
        'eligible',
        'payable',
        'paid')),
  statement_information AS (
    /*This section pulls together statement info for all declarations from the tables statement_line_items and statements and gives the cohort associated with the statement that each declaration was made against*/
    SELECT
      stat_li.participant_declaration_id,
      stat_li.state AS statement_state,
      stat.name AS statement_name,
      stat.type AS statement_type,
      cpd_lp.name AS statement_cpd_lp_name,
      cohort.start_year AS statement_cohort
    FROM
      ${ref(`statement_line_items_latest_cpd`)} stat_li
    LEFT JOIN
      ${ref(`statements_latest_cpd`)} stat
    ON
      stat_li.statement_id=stat.id
    LEFT JOIN
      ${ref(`cpd_lead_providers_latest_cpd`)} cpd_lp
    ON
      stat.cpd_lead_provider_id=cpd_lp.id
    LEFT JOIN
      ${ref(`cohorts_latest_cpd`)} cohort
    ON
      stat.cohort_id=cohort.id
    WHERE
      stat.type LIKE '%ECF%'),
  statement_cohort_checks AS (
    SELECT
      fdmt.*,
      /*This CASE statement finds how far away a declaration is from its relevant declaration milestone window, as defined in the table ecf_schedule_milestone_mapping. Since a declaration can be on either side of the declaration window, the CASE statement calculates the greatest difference.*/
      CASE
        WHEN fdmt.declaration_type = 'started' THEN GREATEST(ABS(DATE_DIFF(started_dec_start_date,dec_date_short,DAY)),ABS(DATE_DIFF(started_dec_milestone_date,dec_date_short,DAY)))
        WHEN fdmt.declaration_type = 'retained-1' THEN GREATEST(ABS(DATE_DIFF(ret1_dec_start_date,dec_date_short,DAY)),ABS(DATE_DIFF(ret1_dec_milestone_date,dec_date_short,DAY)))
        WHEN fdmt.declaration_type = 'retained-2' THEN GREATEST(ABS(DATE_DIFF(ret2_dec_start_date,dec_date_short,DAY)),ABS(DATE_DIFF(ret2_dec_milestone_date,dec_date_short,DAY)))
        WHEN fdmt.declaration_type = 'retained-3' THEN GREATEST(ABS(DATE_DIFF(ret3_dec_start_date,dec_date_short,DAY)),ABS(DATE_DIFF(ret3_dec_milestone_date,dec_date_short,DAY)))
        WHEN fdmt.declaration_type = 'retained-4' THEN GREATEST(ABS(DATE_DIFF(ret4_dec_start_date,dec_date_short,DAY)),ABS(DATE_DIFF(ret4_dec_milestone_date,dec_date_short,DAY)))
        WHEN fdmt.declaration_type = 'completed' THEN GREATEST(ABS(DATE_DIFF(completed_dec_start_date,dec_date_short,DAY)),ABS(DATE_DIFF(completed_dec_milestone_date,dec_date_short,DAY)))
    END
      AS declaration_out_by_x_days,
      si.statement_cpd_lp_name,
      si.statement_cohort,
      /*This CASE statement works out if a declaration date falls in the declaration milestone window across an entire cohort, as defined in the table ecf_schedule_milestone_mapping_condensed. There is crossover between milestone_date_2022 and start_date_2023 for started declarations.*/
      CASE
        WHEN dec_date_short BETWEEN start_date_2021 AND milestone_date_2021 THEN 2021
        WHEN dec_date_short BETWEEN start_date_2022
      AND milestone_date_2022 THEN 2022
        WHEN dec_date_short BETWEEN start_date_2023 AND milestone_date_2023 THEN 2023
      ELSE
      NULL
    END
      AS suggested_cohort_from_declaration
    FROM
      full_declaration_milestone_table fdmt
    LEFT JOIN
      statement_information si
    ON
      fdmt.declaration_id=si.participant_declaration_id
    LEFT JOIN
      `ecf-bq.static_tables.statement_cohort_known_mismatches` sckm
    ON
      fdmt.declaration_id=sckm.id
    WHERE /*This excludes declarations we already know do not align with the statement cohort but the financial statements have been closed so there is no action to be taken.*/
      sckm.id IS NULL),
  full_cohort_checker_output AS (
    SELECT
      *,
      CASE /*This CASE statement works out which (if any) of the checks a declaration belongs to, either the financial statement cohort check or comparing declaration date check. Declarations can belong to one or both of the checks, and we're also pulling together all of a participant's declarations, hence the need for the NULL ending.*/
        WHEN statement_cohort <> cohort AND (suggested_cohort_from_declaration <> cohort 
      AND ((schedule_identifier LIKE 'ecf-standard%'
          AND ((declaration_type = 'started'
              AND (dec_date_short NOT BETWEEN started_dec_start_date
                AND started_dec_milestone_date))
            OR (declaration_type = 'retained-1'
              AND (dec_date_short NOT BETWEEN ret1_dec_start_date
                AND ret1_dec_milestone_date))
            OR (declaration_type = 'retained-2'
              AND (dec_date_short NOT BETWEEN ret2_dec_start_date
                AND ret2_dec_milestone_date))
            OR (declaration_type = 'retained-3'
              AND (dec_date_short NOT BETWEEN ret3_dec_start_date
                AND ret3_dec_milestone_date))
            OR (declaration_type = 'retained-4'
              AND (dec_date_short NOT BETWEEN ret4_dec_start_date
                AND ret4_dec_milestone_date))
            OR (declaration_type = 'completed'
              AND (dec_date_short NOT BETWEEN completed_dec_start_date
                AND completed_dec_milestone_date))))
        OR (schedule_identifier LIKE ANY ('ecf-extended%',
            'ecf-reduced%',
            'ecf-replacement%')
          AND ((declaration_type = 'started'
              AND dec_date_short < started_dec_start_date)
            OR (declaration_type = 'retained-1'
              AND dec_date_short < ret1_dec_start_date)
            OR (declaration_type = 'retained-2'
              AND dec_date_short < ret2_dec_start_date)
            OR (declaration_type = 'retained-3'
              AND dec_date_short < ret3_dec_start_date)
            OR (declaration_type = 'retained-4'
              AND dec_date_short < ret4_dec_start_date)
            OR (declaration_type = 'completed'
              AND dec_date_short < completed_dec_start_date))))) THEN "in both checks"
        WHEN suggested_cohort_from_declaration <> cohort
      AND ((schedule_identifier LIKE 'ecf-standard%'
          AND ((declaration_type = 'started'
              AND (dec_date_short NOT BETWEEN started_dec_start_date
                AND started_dec_milestone_date))
            OR (declaration_type = 'retained-1'
              AND (dec_date_short NOT BETWEEN ret1_dec_start_date
                AND ret1_dec_milestone_date))
            OR (declaration_type = 'retained-2'
              AND (dec_date_short NOT BETWEEN ret2_dec_start_date
                AND ret2_dec_milestone_date))
            OR (declaration_type = 'retained-3'
              AND (dec_date_short NOT BETWEEN ret3_dec_start_date
                AND ret3_dec_milestone_date))
            OR (declaration_type = 'retained-4'
              AND (dec_date_short NOT BETWEEN ret4_dec_start_date
                AND ret4_dec_milestone_date))
            OR (declaration_type = 'completed'
              AND (dec_date_short NOT BETWEEN completed_dec_start_date
                AND completed_dec_milestone_date))))
        OR (schedule_identifier LIKE ANY ('ecf-extended%',
            'ecf-reduced%',
            'ecf-replacement%')
          AND ((declaration_type = 'started'
              AND dec_date_short < started_dec_start_date)
            OR (declaration_type = 'retained-1'
              AND dec_date_short < ret1_dec_start_date)
            OR (declaration_type = 'retained-2'
              AND dec_date_short < ret2_dec_start_date)
            OR (declaration_type = 'retained-3'
              AND dec_date_short < ret3_dec_start_date)
            OR (declaration_type = 'retained-4'
              AND dec_date_short < ret4_dec_start_date)
            OR (declaration_type = 'completed'
              AND dec_date_short < completed_dec_start_date)))) THEN "declaration date check"
        WHEN statement_cohort <> cohort THEN "statement check"
      ELSE
      NULL
    END
      AS check_source
    FROM
      statement_cohort_checks
    WHERE
      statement_cohort <> cohort
      OR (suggested_cohort_from_declaration <> cohort
        AND ((schedule_identifier LIKE 'ecf-standard%'
            AND ((declaration_type = 'started'
                AND (dec_date_short NOT BETWEEN started_dec_start_date
                  AND started_dec_milestone_date))
              OR (declaration_type = 'retained-1'
                AND (dec_date_short NOT BETWEEN ret1_dec_start_date
                  AND ret1_dec_milestone_date))
              OR (declaration_type = 'retained-2'
                AND (dec_date_short NOT BETWEEN ret2_dec_start_date
                  AND ret2_dec_milestone_date))
              OR (declaration_type = 'retained-3'
                AND (dec_date_short NOT BETWEEN ret3_dec_start_date
                  AND ret3_dec_milestone_date))
              OR (declaration_type = 'retained-4'
                AND (dec_date_short NOT BETWEEN ret4_dec_start_date
                  AND ret4_dec_milestone_date))
              OR (declaration_type = 'completed'
                AND (dec_date_short NOT BETWEEN completed_dec_start_date
                  AND completed_dec_milestone_date))))
          OR (schedule_identifier LIKE ANY ('ecf-extended%',
              'ecf-reduced%',
              'ecf-replacement%')
            AND ((declaration_type = 'started'
                AND dec_date_short < started_dec_start_date)
              OR (declaration_type = 'retained-1'
                AND dec_date_short < ret1_dec_start_date)
              OR (declaration_type = 'retained-2'
                AND dec_date_short < ret2_dec_start_date)
              OR (declaration_type = 'retained-3'
                AND dec_date_short < ret3_dec_start_date)
              OR (declaration_type = 'retained-4'
                AND dec_date_short < ret4_dec_start_date)
              OR (declaration_type = 'completed'
                AND dec_date_short < completed_dec_start_date))))))
SELECT
  DISTINCT a.*,
  c.suggested_cohort_from_declaration,
  c.check_source
FROM
  ${ref(`ls_declarations_provider_names`)} a
INNER JOIN
  full_cohort_checker_output b
ON
  a.participant_profile_id = b.participant_profile_id
LEFT JOIN
  full_cohort_checker_output c
ON
  a.id=c.declaration_id
WHERE
  a.programme = 'ECF'
