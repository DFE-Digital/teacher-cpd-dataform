config {
    type: "table",
    assertions: {
        uniqueKey: ["declaration_id"]
    },
    bigquery: {
        partitionBy: "declaration_date",
        clusterBy: ["used_school_urn"]
    },
    description: "",
    columns: {
        declaration_id: "",
        participant_profile_id: "",
        user_id: "",
        TRN: "",
        declaration_type: "",
        declaration_state: "",
        declaration_type_hierarchy: "",
        declaration_date: "",
        lead_provider_name: "",
        delivery_partner_name: "",
        latest_induction_record_id: "",
        induction_record_school_urn: "",
        declaration_date_school_urn: "",
        induction_record_id_on_declaration_date: "",
        used_school_urn: "",
        funded_hours: "",
        unique_school_urn_count: "",
        declaration_sequence: "",
        funded_hours_cost: "",
        previously_paid: "",
        local_authority: "",
        la_code: "",
        teacher_pay_band: "",
        gias_school_name: "",
        gias_establishment_type: "",
        gias_phase_of_education: "",
        gias_establishment_status: "",
        school_mentor_count: "",
        school_ect_count: "",
        school_mentor_backfill_funded_hours: "",
        fractional_ect_count: ""
   }
}

WITH declarations AS (
  SELECT
     dec.declaration_id
    ,dec.participant_profile_id
    ,dec.user_id
    ,dec.TRN
    ,dec.declaration_type
    ,dec.state AS declaration_state
    ,CASE
      WHEN dec.declaration_type = 'started' THEN 1
      WHEN dec.declaration_type = 'retained-1' THEN 2
      WHEN dec.declaration_type = 'retained-2' THEN 3
      WHEN dec.declaration_type = 'retained-3' THEN 4
      WHEN dec.declaration_type = 'retained-4' THEN 5
      WHEN dec.declaration_type = 'extended-1' THEN 6
      WHEN dec.declaration_type = 'extended-2' THEN 7
      WHEN dec.declaration_type = 'extended-3' THEN 8
      WHEN dec.declaration_type = 'completed' THEN 9
      ELSE NULL
     END AS declaration_type_hierarchy
    ,DATE(dec.declaration_date) AS declaration_date
    ,dec.cpd_lead_provider_name AS lead_provider_name
    ,COALESCE(dec.cpd_delivery_partner_name, dec.delivery_partner_name) AS delivery_partner_name
    ,dec.induction_record_id AS latest_induction_record_id
    ,dec.school_urn AS induction_record_school_urn -- School URN of latest induction record.
    ,COALESCE(ind.school_urn, ind2.school_urn) AS declaration_date_school_urn -- School URN on the induction record valid on the declaration date.
    ,COALESCE(ind.induction_record_id, ind2.induction_record_id) AS induction_record_id_on_declaration_date
    ,COALESCE(ind.school_urn, dec.school_urn) AS used_school_urn
    -- For each started, retained-1/2/3/4 or completed declaration 6 hours of funding is allocated.
    ,CASE
      WHEN dec.declaration_type IN ('started', 'retained-1', 'retained-2', 'retained-3', 'retained-4', 'completed') THEN 6
      ELSE 0
     END AS funded_hours
    ,CASE
      WHEN ROW_NUMBER() OVER(PARTITION BY COALESCE(ind.school_urn, ind2.school_urn, dec.school_urn)) = 1 THEN 1
      ELSE 0
     END AS unique_school_urn_count
    ,CASE
      WHEN (ROW_NUMBER() OVER(PARTITION BY dec.declaration_id ORDER BY COALESCE(ind.start_date, ind2.start_date) DESC)) = 1 THEN 1
      ELSE 0
     END AS rn0
  FROM
    ${ref('ecf_declarations')} AS dec
  LEFT JOIN
    ${ref('ecf_inductions')} AS ind
  ON
    ind.participant_profile_id = dec.participant_profile_id
    AND
    DATE(dec.declaration_date) BETWEEN DATE(ind.start_date) AND DATE(IFNULL(ind.end_date, '2050-12-31'))


  LEFT JOIN
    ${ref('ecf_inductions')} ind2
  ON
    ind2.participant_profile_id = dec.participant_profile_id
    AND
    DATE(dec.declaration_date) < IFNULL(DATE(ind2.end_date), '2050-12-31')
    AND
    ind.induction_record_id IS NULL

  WHERE
    funded_declaration = TRUE
    AND
    participant_course = 'Mentor'
    AND
    dec.declaration_date >= '2023-09-01'
  QUALIFY (
    rn0 = 1
  )
),

ects AS (
  SELECT
     sch.urn
    ,COUNT(1) AS school_ect_count
  FROM
    ${ref('participant_profiles_latest_cpd')} pp
  LEFT JOIN
    ${ref('school_cohorts_latest_cpd')} scho
  ON
    scho.id = pp.school_cohort_id
  LEFT JOIN
    ${ref('schools_latest_cpd')} sch
  ON
    sch.id = scho.school_id
  WHERE
    type LIKE '%ECT'
    AND
    induction_completion_date IS NULL OR induction_completion_date > '2023-08-31'
  GROUP BY
    sch.urn
  ORDER BY
    school_ect_count DESC
),

declarations_extended AS (
  SELECT
     dec.*
    ,ROW_NUMBER() OVER(PARTITION BY dec.participant_profile_id ORDER BY declaration_type_hierarchy ASC) AS declaration_sequence
    ,ROUND((cost.cost_for_36_hours / 36) * dec.funded_hours, 2) AS funded_hours_cost
    ,CASE
      WHEN pp1.user_id IS NOT NULL THEN TRUE
      WHEN pp2.user_id IS NOT NULL THEN TRUE
      ELSE FALSE
     END AS previously_paid
    ,gias.LA_Name AS local_authority
    ,gias.LA_code AS la_code
    ,band.teacher_pay_band
    ,gias.EstablishmentName AS gias_school_name
    ,gias.TypeOfEstablishment_name AS gias_establishment_type
    ,gias.PhaseOfEducation_name AS gias_phase_of_education
    ,gias.EstablishmentStatus_name AS gias_establishment_status
    ,COUNT(DISTINCT dec.participant_profile_id) OVER(PARTITION BY dec.used_school_urn) AS school_mentor_count
    ,ects.school_ect_count
  FROM
    declarations dec
  LEFT JOIN
    ects
  ON
    ects.urn = dec.used_school_urn
  LEFT JOIN
    ${ref('establishments')} AS gias
  ON
    CAST(gias.urn AS INT) = dec.used_school_urn
  LEFT JOIN
    ${ref('la_teacher_pay_band_grouping')} AS band
  ON
    band.LA_code = CAST(gias.LA_code AS INT)
  LEFT JOIN
    ${ref('ecf_mentors_previously_paid')} AS pp1
  ON
    pp1.user_id = dec.user_id
    AND
    dec.declaration_type IN ('started', 'retained-1', 'retained-2')
    AND
    pp1.payment_period LIKE 'Instalment 1%'
  LEFT JOIN
    ${ref('ecf_mentors_previously_paid')} AS pp2
  ON
    pp2.user_id = dec.user_id
    AND
    dec.declaration_type IN ('retained-3', 'retained-4', 'completed')
    AND
    pp2.payment_period LIKE 'Instalment 2%'
  LEFT JOIN
    ${ref('teacher_pay_band_36_hour_cost')} AS cost
  ON
    cost.teacher_pay_band = band.teacher_pay_band
)

SELECT
   * EXCEPT(rn0)
  -- Funded hours per school for mentors not previously paid to enable aggregation at school level for relevant cases only.
  ,SUM(CASE WHEN previously_paid = FALSE THEN funded_hours ELSE 0 END) OVER(PARTITION BY used_school_urn) AS school_mentor_backfill_funded_hours
  -- School ECT count evenly distributed across rows for mentors who were not previously paid to enable aggregation at School level in the dashboard output.
  ,CASE
    WHEN previously_paid = FALSE THEN school_ect_count / (SUM(CASE WHEN previously_paid = FALSE THEN 1 ELSE 0 END) OVER(PARTITION BY used_school_urn))
    ELSE 0
   END AS fractional_ect_count
FROM
  declarations_extended