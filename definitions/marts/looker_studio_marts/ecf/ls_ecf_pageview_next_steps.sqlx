config {
    type: "incremental",
    assertions: {
        uniqueKey: ["session_id", "pageview_number_in_session", "user_id"]
    },
    bigquery: {
        partitionBy: "DATE(session_start_timestamp)"
    },
    description: "Pageviews that occurred on an ECF service, along with details of previous and next steps users took within their session. Sessions defined Google Analytics style from the dfe-analytics-dataform session_details table. Intended to support a funnel analysis dashboard.",
    columns: {
        session_id: "UID of this session",
        user_id: "ID of the user logged in at some point during this session - if they were. Traffic from separate user_ids is always separated into separate sessions.",
        session_start_timestamp: "Time at which the session began",
        page_path: "Path of the page that was viewed, excluding domain and query string.",
        referer_path: "Path of the previous page that was viewed, if it was. May be an external site or an internal pageview from a previous session. Not the same as previous_step.",
        referer_domain: "Domain of the previous page that was viewed, if it was and if this is available. May be an external site or an internal pageview from a previous session.",
        page_entry_time: "Time at which this pageview happened.",
        next_step: "Path of the next page that was viewed on this service within this session, if it was. If it wasn't, contains the string 'End of session'.",
        previous_step: "Path of the previous page that was viewed on this service *within this session*, if it was. If it wasn't, contains the string 'End of session'. Not the same as referer_path.",
        pageview_number_in_session: "Number indicating that this pageview was the Nth pageview within this session.",
        time_on_page: "Number of seconds between page_entry_time and the page_entry_time of the next pageview if it exists. NULL otherwise.",
        admin_session: "TRUE if this user was an internal DfE admin user, deduced from whether they viewed any page path containing 'admin' at any point in the session.",
        session_utm_source: "Value of the utm_source UTM parameter for the first pageview in the session, if it was set. Useful to categorise traffic for marketing purposes.",
        session_utm_medium: "Value of the utm_medium UTM parameter for the first pageview in the session, if it was set. Useful to categorise traffic for marketing purposes.",
        session_utm_campaign: "Value of the utm_campaign UTM parameter for the first pageview in the session, if it was set. Useful to categorise traffic for marketing purposes."
    }
}

pre_operations {
  DECLARE session_timestamp_checkpoint DEFAULT (
    ${when(incremental(),
    `SELECT MAX(session_start_timestamp) FROM ${self()}`,
    `SELECT TIMESTAMP("2000-01-01")`)}
  )
}

SELECT
  session_id,
  user_id,
  session_start_timestamp,
  pageview.*,
  utm_source AS session_utm_source,
  utm_medium AS session_utm_medium,
  utm_campaign AS session_utm_campaign
FROM
  ${ref("session_details_cpd")},
  UNNEST(ARRAY(
    SELECT
      AS STRUCT
      page AS page_path,
      previous_page AS referer_path,
      page_entry_time,
      IFNULL(LEAD(page) OVER pageviews_in_order, "End of session") AS next_step,
      IFNULL(LAG(page) OVER pageviews_in_order, "Start of session") AS previous_step,
      ROW_NUMBER() OVER pageviews_in_order AS pageview_number_in_session,
      previous_page_domain AS referer_domain,
      duration AS time_on_page,
      LOGICAL_OR(CONTAINS_SUBSTR(page, "/admin")) OVER pageviews_in_order AS admin_session
    FROM
      UNNEST(pages_visited_details)
    WINDOW
      pageviews_in_order AS (
      ORDER BY
        page_entry_time ASC))) AS pageview
WHERE
  session_start_timestamp > session_timestamp_checkpoint