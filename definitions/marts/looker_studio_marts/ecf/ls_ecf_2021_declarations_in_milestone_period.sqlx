config {
    type: "table",
    assertions: {
        uniqueKey: ["declaration_id"]
    },
    bigquery: {
        partitionBy: "DATE(declaration_date)",
        clusterBy: ["role"]
    },
    description: "This mart holds all funded (paid, payable, eligible) ECF declarations for participants in the 2021 cohort with multiple in any one Milestone Period. \n \
    Objective: \n \
      To identify all declarations that fall within the same milestone period for review. \n \
    Dependencies: \n \
      static_tables.ecf_2021_milestone_periods \n \
      dataform.ls_declarations_provider_names",
    columns: {
        user_id: "This comes from the teacher profile associated with the participant profile. User ID also exists independently in other tables.",
        participant_profile_id: "The ID from a participant's profile in the CPD service. Participant profiles are only generated when an application is accepted by a lead provider. There is one profile per accepted application. An NPQ participant will have a different participant_profile_id for each accepted NPQ. Their participant_profile_id should match the application_id and should match the participant_profile_id available in the declarations_latest table. While their participant_profile_id changes across NPQs, their participant_identity_id will remain the same across their participant profiles so long as they have signed up with the same email.",
        role: "The role of the participant which is either ECT or Mentor as per the participant type.",
        current_schedule: "The schedule as per the participant profile.",
        cohort: "The cohort/academic year corresponding to when the participant started their course.",
        declaration_id: "The unique identifier for the declaration.",
        declaration_type: "The type of declaration which can be started, retained-#, extended-# or completed. #'s range from 1 to 4.",
        declaration_date: "The date of when the evidence was submitted against the declaration.",
        declaration_state: "The state of the declaration which for this mart can only be either paid, payable or eligible.",
        declaration_type_sort_order: "A numeric value associated with the declaration type to enable sorting based upon its value. The order is started, retained-[1-4], extended-[1-3], completed.",
        lead_provider: "The name of the Lead Provider that submitted the declaration.",
        milestone_period_id: "The integer ID for the Milestone Period as per the static table ecf_2021_milestone_periods.",
        milestone_period: "Concatenation of period start and end dates to create a grouping. These periods are only relevant to the 2021 academic cohort.",
        milestone_period_dupe_flag: "1 or 0 if the declaration exists within a Milestone Period alongside another.",
        declaration_date_dupe_flag: "1 or 0 if the declaration exists on the same Declaration Date as another.",
        same_milestone_period: "This field contains 1 of 3 values. 'Same milestone period used more than once' if the milestone_period_dupe_flag is 1 and declaration_date_dupe_flag is 0, 'Same declaration date used more than once' if declaration_date_dupe_flag is 1 or blank if neither dupe flag is 1.",
        is_dummy_date: "TRUE/FALSE if the declaration date is the same as the start or end date of the Milestone Period. Some Lead Providers were informed to use these dates in order to allow multiple declarations in a single period and this flag allows the Contract Management team to assess those declarations.",
        declaration_date_chk: "Count of declarations with the same date by user_id, provider_name and course_identifier",
        milestone_period_chk: "Count of declarations within the same milestone period by user_id, provider_name and course_identifier."
   }
}
/*** ECF Declarations in Same Milestone Period Looker Studio Mart ***/
/*
  Objective:
    To identify all declarations that fall within the same milestone period for review.

  Dependencies:
    static_tables.ecf_2021_milestone_periods
    dataform.ls_declarations_provider_names

  Version History:
    1.0 2024-05-24 Tony Page
      Initial build

    1.1 2024-05-28 Tony Page
      Removed any Profile IDs where 0 declarations meet the criteria of same milestone period.

    1.2 2024-05-30 Tony Page
      Changed relevant profiles to use a concatenation of participant_profile_id & provider_id to remove declarations appearing against providers for participants with multiple in same milestone period but with a different lead provider.

    1.3 2024-06-04 Tony Page
      Made performance improvements and shortening of code by replacing 2 grouping CTEs with COUNT(*) over partitions and excluding unnecessary Participant-Provider combinations with a SUM() over partitions.
      This also removed 2 dependencies.

*/

-- Gather milestone period and split into individual dates between start & end of period for use in joins later.
WITH milestone_periods AS (
  SELECT 
     milestone_period_id
    ,milestone_period_start_date
    ,milestone_period_end_date
    ,milestone_period_date
  FROM 
    ${ref('ecf_2021_milestone_periods')}
  CROSS JOIN 
    UNNEST(
      GENERATE_DATE_ARRAY(milestone_period_start_date, milestone_period_end_date, INTERVAL 1 DAY)
    ) AS milestone_period_date
),

-- Gather all ECF declarations where state is in 'paid', 'payable', 'eligible'
ecf_declarations AS (
  SELECT 
     id AS declaration_id
    ,user_id
    ,participant_profile_id
    ,course_identifier
    ,cpd_lead_provider_id AS provider_id
    ,cpd_lp_name AS provider_name
    ,declaration_date
    ,declaration_type
    ,CASE
      WHEN declaration_type = 'started' THEN 1
      WHEN declaration_type = 'retained-1' THEN 2
      WHEN declaration_type = 'retained-2' THEN 3
      WHEN declaration_type = 'retained-3' THEN 4
      WHEN declaration_type = 'retained-4' THEN 5
      WHEN declaration_type = 'extended-1' THEN 6
      WHEN declaration_type = 'extended-2' THEN 7
      WHEN declaration_type = 'extended-3' THEN 8
      WHEN declaration_type = 'completed' THEN 9
    END AS declaration_type_sort_order
    ,state AS declaration_state
    ,evidence_held
    ,cohort
    ,statement_cohort
    ,mentor_user_id
    ,schedule_identifier
  FROM
    ${ref('ls_declarations_provider_names')}
  WHERE
    programme = 'ECF'
    AND
    state IN (
       'paid'
      ,'payable'
      ,'eligible'
    )
    AND cohort = 2021
),

-- Combine data obtained so far and generate grouping columns
  -- Milestone Period Group = participant + course + lead provider + milestone period
  -- Declaration Date Group = participant + course + lead provider + declaration date
combined_data AS (    
  SELECT 
    dec.*
    ,CASE
      WHEN course_identifier LIKE '%ecf-mentor%' THEN 'Mentor'
      WHEN course_identifier LIKE '%ecf-induction%' THEN 'ECT'
      ELSE ''
    END AS participant_type
    ,mp.milestone_period_id
    ,mp.milestone_period_start_date
    ,mp.milestone_period_end_date
    -- Assess each grouping for quantity and apply an indicator flag (1 or 0) where not an allowed instance.
      -- In Milestone Period 1 providers were allowed to submit both started & retained-1 declarations for participants.
    ,CASE 
      WHEN COUNT(*) OVER (PARTITION BY participant_profile_id, course_identifier, provider_id, milestone_period_id) > 1 
           AND
           (milestone_period_id = 1 AND declaration_type IN ('started', 'retained-1')) = FALSE THEN 1 
      ELSE 0 
     END AS milestone_period_dupe_flag
    ,CASE 
      WHEN COUNT(*) OVER (PARTITION BY participant_profile_id, course_identifier, provider_id, DATE(declaration_date)) > 1 
           AND
           (milestone_period_id = 1 AND declaration_type IN ('started', 'retained-1')) = FALSE THEN 1 
      ELSE 0 
     END AS declaration_date_dupe_flag

    ,IF(DATE(declaration_date) IN (milestone_period_start_date, milestone_period_end_date), 1, 0) AS declaration_on_dummy_date
  FROM 
    ecf_declarations dec
  -- Join on milestone periods
  LEFT JOIN
    milestone_periods mp 
  ON
    mp.milestone_period_date = DATE(dec.declaration_date)
  ORDER BY
    mp.milestone_period_id ASC, dec.declaration_date ASC
)

-- Build output table
SELECT
   user_id
  ,participant_profile_id
  ,participant_type AS role
  ,schedule_identifier AS current_schedule
  ,cohort
  ,declaration_id
  ,declaration_type
  ,declaration_date
  ,declaration_state
  ,declaration_type_sort_order
  ,provider_name AS lead_provider
  ,milestone_period_id
  ,milestone_period_start_date || ' - ' || milestone_period_end_date AS milestone_period
  ,milestone_period_dupe_flag
  ,declaration_date_dupe_flag
  ,CASE
    WHEN declaration_date_dupe_flag = 1 THEN 'Same declaration date used more than once'
    WHEN milestone_period_dupe_flag = 1 THEN 'Same milestone period used more than once'
    ELSE ''
   END AS same_milestone_period
  ,IF(declaration_on_dummy_date = 1, TRUE, FALSE) AS is_dummy_date
  -- Qualify each row based upon the Pariticpant & Provider to exclude any where this combination has no relevant erroneous declarations.
  ,SUM(declaration_date_dupe_flag) OVER (PARTITION BY participant_profile_id, provider_id) AS declaration_date_chk
  ,SUM(milestone_period_dupe_flag) OVER (PARTITION BY participant_profile_id, provider_id) AS milestone_period_chk
FROM
  combined_data
QUALIFY
  declaration_date_chk > 0 OR milestone_period_chk > 0
ORDER BY
  cohort ASC, participant_profile_id ASC, declaration_type_sort_order ASC