config {
    type: "table",
    assertions: {
        uniqueKey: ["id"],
        rowConditions: [
            'programme<>"Other"'
        ]

    },
    bigquery: {
        partitionBy: "DATE(declaration_date)",
        clusterBy: ["programme", "cpd_lp_name", "course_identifier", "type"]
    },
    description: "This mart produces a report showing the most recent 'state' for each declaration across ECF and NPQ and links it to the names of the Lead Providers. The final report feeds into the CPD - Self-Serve Data dashboard",
    columns: {
        id: "ID of declaration.",
        created_at: "Timestamp when the declaration was created.",
        updated_at: "Timestamp of when any updates occured to the declaration.",
        course_identifier: "Identifier for ECF or NPQ course declaration is associated with.",
        cpd_lead_provider_id: "ID of Lead Provider that has made the declaration.",
        declaration_date: "Date evidence was received.",
        declaration_type: "The name of the stage the declaration has been made against.",
        delivery_partner_id: "ID of the ECF Delivery Partner associated with the Lead Provider-participant combo.",
        evidence_held: "Details any evidence provided with the declaration.",
        mentor_user_id: "User ID of the mentor associated with the declared-against ECT",
        participant_profile_id: "ID of the participant's profile.",
        pupil_premium: "Boolean for pupil premium eligibility.",
        sparsity_uplift: "Boolean for sparsity uplift eligibility.",
        state: "State of the declaration. Can be submitted, eligible, payable, paid, ineligible, voided, awaiting_clawback, and clawed_back.",
        superseded_by_id: "NEED PROPER DEFINITION",
        type: "Says if it belongs to either the ECF or NPQ programme.",
        user_id: "Used ID of the participant being declared against.",
        last_streamed_event_occurred_at: "Timestamp of when this record was most recently imported or updated.",
        last_streamed_event_type: "Whether the most recent event was this entity being imported or updated.",
        cohort: "Participant's cohort from either npq_enrolments or ecf_indcutions_dedupe.",
        schedule_identifier: "Participant's schedule from either npq_enrolments or ecf_indcutions_dedupe.",
        statement_cohort: "Cohort from the financial statement a declaration is stored against.",
        cpd_lp_name: "Name of Lead Provider for NPQ or ECF course",
        cpd_dp_name: "Name of Delivery Partner for ECF course",
        programme: "Shortening of 'type'. Says if it belongs to either the ECF or NPQ programme."
    }
}

WITH
  statement_information AS (
  /*This section pulls together statement info for all declarations from the tables statement_line_items and statements and gives the cohort associated with the statement that each declaration was made against*/
  SELECT
    DISTINCT stat_li.participant_declaration_id,
    cohort.start_year AS statement_cohort
  FROM
    `dataform.statement_line_items_latest_cpd` stat_li
  LEFT JOIN
    `dataform.statements_latest_cpd` stat
  ON
    stat_li.statement_id=stat.id
  LEFT JOIN
    `dataform.cohorts_latest_cpd` cohort
  ON
    stat.cohort_id=cohort.id)
SELECT
  dec.*,
  COALESCE(ecfid.cohort,npqe.cohort) AS cohort,
  COALESCE(ecfid.schedule_identifier,npqe.schedule_identifier) AS schedule_identifier,
  state_info.statement_cohort,
  COALESCE(lpl.name,npqlpl.name) AS cpd_lp_name,
  dpl.name AS cpd_dp_name,
  CASE
    WHEN dec.course_identifier LIKE 'npq%' THEN 'NPQ'
    WHEN dec.course_identifier LIKE 'ecf%' THEN 'ECF'
  ELSE
  'Other'
END
  AS programme
FROM
  ${ref("participant_declarations_latest_cpd")} dec
LEFT JOIN
  ${ref("ecf_inductions_dedupe")} ecfid
USING
  (participant_profile_id)
LEFT JOIN
  ${ref("npq_enrolments")} npqe
ON
  dec.participant_profile_id = npqe.application_ecf_id
LEFT JOIN
  statement_information state_info
ON
  dec.id=state_info.participant_declaration_id
LEFT JOIN
  ${ref("lead_providers_latest_cpd")} lpl
USING
  (cpd_lead_provider_id)
LEFT JOIN
  ${ref("npq_lead_providers_latest_cpd")} npqlpl
USING
  (cpd_lead_provider_id)
LEFT JOIN
  ${ref("delivery_partners_latest_cpd")} dpl
ON
  dec.delivery_partner_id = dpl.id
