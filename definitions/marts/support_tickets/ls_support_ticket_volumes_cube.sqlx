config {
    type: "table",
    bigquery: {
        partitionBy: "created_at",
    },
    description: "This mart calculates the number of tickets received on a given day, which have been classified by the support_ticket_classification mart. For each day in between 2024-01-01 and the current date, it counts each metric grouped by both programme_type and classification. The mart is specifically designed to support the CPD Programme Support Ticket Volumes dashboard and track performance through support ticket volumes. It utilises a cube architecture to enable the calculation of key performance indicators (KPIs) specific to support tickets. In cases where tickets cannot be classified due to poor or missing data, they are proportionally assigned to the ECTE and NPQ categories to ensure that no historical data is lost.",
    columns: {
        created_at: "Date and time of that this ticket was logged in Zendesk.",
        programme_type: "A calculated field which indicates which programme the ticket belongs to. Possible values: ECTE, NPQ or Triage",
        classification: "The derived classification for the ticket. Possible values: CPD - ECTE, ECTE - Funding, NPQ - Get a TRN, ECTE - Induction and AB, CPD - NPQ, NPQ - Funding, CPD - Triage. Tickets marked as 'Unclassifiable - bad data' cannot be classified with the data available from Zendesk or the migrated subject.",
        ticket_count: "The number of tickets received on a given day, grouped by programme_type and classification.",
        duplicate_tickets_count: "The number of duplicate tickets received on a given day, grouped by programme_type and classification. Tickets are identified as duplicates when the 'closed_by_merge' tag is present in the ticket.",
        tickets_reopened_count: "The number of tickets received on a given day that were later reopened, grouped by programme_type and classification.",
        tickets_reply_outside_sla_count: "The number of tickets received on a given day that were replied to outside of SLA period (SLA = 5 days), grouped by programme_type and classification.",
        tickets_escalated_2nd_line_count: "The number of tickets received on a given day that were escalated to 2nd line support, grouped by programme_type and classification.",
        tickets_escalated_3rd_line_count: "The number of tickets received on a given day that were escalated to 3rd line support, grouped by programme_type and classification.",
        bad_ticket_count: "The number of tickets received on a given that that either were reopened, the first reply was ouside of SLA or escalated to the 2nd line of support."
    }
}

WITH
  kpi_cube AS (
  SELECT
    created_at,
    programme_type,
    classification,
    COUNT(*) AS ticket_count,
    COUNTIF(is_duplicate) AS duplicate_tickets_count,
    COUNTIF(reopened_ticket) AS tickets_reopened_count,
    COUNTIF(NOT first_reply_within_sla) AS tickets_reply_outside_sla_count,
    COUNTIF(escalated_2nd_line) AS tickets_escalated_2nd_line_count,
    COUNTIF(escalated_3rd_line) AS tickets_escalated_3rd_line_count,
    COUNTIF(escalated_2nd_line
      OR reopened_ticket
      OR NOT first_reply_within_sla) AS bad_ticket_count
  FROM
    ${ref('support_ticket_classification')}
  GROUP BY
    ALL),
  --- The following 3 CTEs are used later to ensure we have one row per day/programme_type/classification combination and rows where all metrics are 0 for these combinations are not missed.
  programme_types AS (
SELECT
  DISTINCT programme_type
FROM
  ${ref('support_ticket_classification')}
WHERE
  programme_type IS NOT NULL ),
  classifications AS (
  SELECT
    DISTINCT classification
  FROM
    ${ref('support_ticket_classification')}
  WHERE
    classification IS NOT NULL and classification != 'Unclassifiable - bad data'),
  dates AS (
  SELECT
    created_at
  FROM
    UNNEST(GENERATE_DATE_ARRAY('2021-04-15',CURRENT_DATE)) AS created_at ),
  -- We begin by proportionately assigning tickets created before 2024-01-01 to either the ECTE or NPQ service, based on the distribution of ECTE and NPQ service tickets created in 2024. These tickets lack sufficient information to be classified in the support_tickets_classification mart due to poor historical data quality. However, as they are valid tickets—not duplicates or mis-migrated ones—their volumes should still be reflected in the overall counts.
  classification_proportions AS (
SELECT
  COUNTIF(classification = 'CPD - NPQ') / COUNT(*) AS npq_proportion,
  COUNTIF(classification = 'CPD - ECTE') / COUNT(*) AS ecte_proportion
FROM
  ${ref('support_ticket_classification')}
WHERE
  classification IN ('CPD - NPQ',
    'CPD - ECTE') and EXTRACT(YEAR FROM created_at) = 2024 ),
  proportionately_assigning_classification AS (
  SELECT
    *
  FROM
    kpi_cube
  WHERE
    (programme_type IS NOT NULL
      AND classification != 'Unclassifiable - bad data'
      AND created_at < '2024-01-01')
    OR created_at >= '2024-01-01'
  UNION ALL
  SELECT
    created_at,
    'NPQ' AS programme_type,
    'CPD - NPQ' AS classification,
    ticket_count * classification_proportions.npq_proportion AS ticket_count,
    duplicate_tickets_count * classification_proportions.npq_proportion AS duplicate_tickets_count,
    tickets_reopened_count * classification_proportions.npq_proportion AS tickets_reopened_count,
    tickets_reply_outside_sla_count * classification_proportions.npq_proportion AS tickets_reply_outside_sla_count,
    tickets_escalated_2nd_line_count * classification_proportions.npq_proportion AS tickets_escalated_2nd_line_count,
    tickets_escalated_3rd_line_count * classification_proportions.npq_proportion AS tickets_escalated_3rd_line_count,
    bad_ticket_count * classification_proportions.npq_proportion AS bad_ticket_count
  FROM
    kpi_cube,
    classification_proportions
  WHERE
    --- we have included this logic to ensure we only include rows we want to proportionately assign.
    programme_type IS NULL
    AND classification = 'Unclassifiable - bad data'
    AND created_at < '2024-01-01'
  UNION ALL
  SELECT
    created_at,
    'ECTE' AS programme_type,
    'CPD - ECTE' AS classification,
    ticket_count * classification_proportions.ecte_proportion AS ticket_count,
    duplicate_tickets_count * classification_proportions.ecte_proportion AS duplicate_tickets_count,
    tickets_reopened_count * classification_proportions.ecte_proportion AS tickets_reopened_count,
    tickets_reply_outside_sla_count * classification_proportions.ecte_proportion AS tickets_reply_outside_sla_count,
    tickets_escalated_2nd_line_count * classification_proportions.ecte_proportion AS tickets_escalated_2nd_line_count,
    tickets_escalated_3rd_line_count * classification_proportions.ecte_proportion AS tickets_escalated_3rd_line_count,
    bad_ticket_count * classification_proportions.ecte_proportion AS bad_ticket_count
  FROM
    kpi_cube,
    classification_proportions
  WHERE
    --- we have included this logic to ensure we only include rows we want to proportionately assign.
    programme_type IS NULL
    AND classification = 'Unclassifiable - bad data'
    AND created_at < '2024-01-01'),
  summing_metrics AS (
  SELECT
    created_at,
    programme_type,
    classification,
    SUM(ticket_count) AS ticket_count,
    SUM(duplicate_tickets_count) AS duplicate_tickets_count,
    SUM(tickets_reopened_count) AS tickets_reopened_count,
    SUM(tickets_reply_outside_sla_count) AS tickets_reply_outside_sla_count,
    SUM(tickets_escalated_2nd_line_count) AS tickets_escalated_2nd_line_count,
    SUM(tickets_escalated_3rd_line_count) AS tickets_escalated_3rd_line_count,
    SUM(bad_ticket_count) AS bad_ticket_count
  FROM
    proportionately_assigning_classification
  GROUP BY
    ALL )
SELECT
  dates.created_at,
  programme_types.programme_type,
  classifications.classification,
  IFNULL(ticket_count, 0.0) AS ticket_count,
  IFNULL(duplicate_tickets_count, 0.0) AS duplicate_tickets_count,
  IFNULL(tickets_reopened_count, 0.0) AS tickets_reopened_count,
  IFNULL(tickets_reply_outside_sla_count, 0.0) AS tickets_reply_outside_sla_count,
  IFNULL(tickets_escalated_2nd_line_count, 0.0) AS tickets_escalated_2nd_line_count,
  IFNULL(tickets_escalated_3rd_line_count, 0.0) AS tickets_escalated_3rd_line_count,
  IFNULL(bad_ticket_count, 0.0) AS bad_ticket_count
FROM
  dates,
  programme_types,
  classifications
LEFT JOIN
  summing_metrics
USING
  (created_at,
    programme_type,
    classification)