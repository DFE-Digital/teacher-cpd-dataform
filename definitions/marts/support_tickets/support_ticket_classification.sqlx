config {
    type: "table",
    uniqueKey: ["ticket_id"],
    bigquery: {
        partitionBy: "created_at",
    },
    description: "This mart tracks and classifies support tickets submitted to CPD service lines, enabling analysis of support demand across the ECTE and NPQ programmes. The mart supports operational decision-making and service improvement by categorising tickets by programme (ECTE or NPQ) and service classification (e.g., Induction & AB, NPQ, ECTE Funding). Each ticket is assigned a derived classification based on its originating Zendesk group, associated tags and issue types and for migrated tickets, it's ticket subject, with logic to identify duplicates. Tickets are also mapped to high-level programme_type categories (ECTE, NPQ, or TBC) to facilitate streamlined reporting. The mart distinguishes between active services (e.g., CPD - ECTE, CPD - NPQ) and archive or triage groups, and flags tickets closed as part of merge actions to avoid duplicate counts.",
    columns: {
        ticket_id: "UID of each support ticket taken from Zendesk.",
        programme_type: "A calculated field which indicates which programme the ticket belongs to. Possible values: ECTE, NPQ or Triage",
        classification: "The derived classification for the ticket. Possible values: CPD - ECTE, ECTE - Funding, NPQ - Get a TRN, ECTE - Induction and AB, CPD - NPQ, NPQ - Funding, CPD - Triage. Tickets marked as 'Unclassifiable - bad data' cannot be classified with the data available from Zendesk or the migrated subject.",
        support_ticket_theme: "NPQ PROGRAMME TYPE ONLY: The theme of the request contained in the support ticket. Derived from the issue_types assigned to the ticket.",
        group_name: "Name of group this ticket relates to taken from Zendesk e.g. CPD",
        service_name: "Name of service this ticket relates to taken from Zendesk e.g. ECTE",
        issue_type: "ARRAY of issue types selected for this ticket_id. This combines all issue types from all Zendesk instances.",
        tags: "Array of metatags given to each ticket in Zendesk (can be user, organisation or issue related).",
        is_duplicate: "A boolean field which indicates duplicate tickets submitted by a user. Tickets are identified as duplicates when the 'closed_by_merge' tag is present in the ticket.",
        created_at: "Date and time of that this ticket was logged in Zendesk.",
        solved_at: "Date and time this ticket was resolved in Zendesk.",
        updated_at: "Timestamp of the last update to this ticket in Zendesk.",
        status_updated_at: "Timestamp of the last update to this ticket's status in Zendesk.",
        subject: "The subject of tickets migrated to the new instance of CPD. Any tickets created after December 2023 will not have a subject. This data has been provided by Shaun Osborne and Declan Fisher to help classify historic support tickets whose data was lost as part of the migration to the new instance of Zendesk",
        reopened_ticket: "TRUE if ticket has been reopened at least once",
        first_reply_within_sla: "TRUE if the first reply on the ticket was within SLA. Note: for CPD, SLA = 5 working days.",
        escalated_2nd_line: "TRUE if the ticket was escalated to 2nd line support.",
        escalated_3rd_line: "TRUE if the ticket was escalated to 3rd line support."
    }
}

WITH
  cpd_prog_data AS (
  SELECT
    ticket_id,
    DATE(created_at) AS created_at,
    group_name,
    status,
    LOWER(IFNULL(service_name, 'Unknown')) AS service_name,
    ARRAY(
    SELECT
      LOWER(elem)
    FROM
      UNNEST(issue_type) AS elem) AS issue_type,
    ARRAY(
    SELECT
      LOWER(elem)
    FROM
      UNNEST(tags) AS elem) AS tags,
    solved_at,
    updated_at,
    status_updated_at,
    LOWER(stm.subject) AS subject,
    reopened_ticket,
    first_reply_within_sla,
    IFNULL(LOWER(group_name) LIKE '%2nd line%',FALSE) AS escalated_2nd_line,
    IFNULL(LOWER(group_name) LIKE '%3rd line%', FALSE) AS escalated_3rd_line
  FROM
    ${ref('support_ticket_details_anonymised')} AS sta
  LEFT JOIN
    `ecf-bq.static_tables.support_ticket_details_migrated` AS stm
  ON
    sta.ticket_id = stm.destination_id
  WHERE
    group_name LIKE 'CPD%'),
  duplicate_tickets AS (
  SELECT
    ticket_id,
    LOGICAL_OR( 'closed_by_merge' IN UNNEST(tags)
      AND status = 'closed' ) AS is_duplicate,
  FROM
    cpd_prog_data
  GROUP BY
    ticket_id),
  classification_logic AS (
  SELECT
    cpd_prog_data.*,
    CASE

      -- First classification layer: classifies support tickets based on tags and issue_types associated to each ticket
      WHEN (SELECT LOGICAL_OR(val LIKE '%induction_and_ab%') FROM UNNEST(cpd_prog_data.issue_type || cpd_prog_data.tags) AS val) THEN 'ECTE - Induction and AB'
      WHEN (SELECT LOGICAL_OR(val LIKE '%funding%') and LOGICAL_OR(val LIKE '%npq%') FROM  UNNEST(cpd_prog_data.issue_type || cpd_prog_data.tags) AS val) THEN 'NPQ - Funding'
      WHEN (SELECT LOGICAL_OR(STARTS_WITH(val, 'get_a_trn')) FROM UNNEST(cpd_prog_data.issue_type || cpd_prog_data.tags) AS val ) THEN 'NPQ - Get a TRN'      
      WHEN (SELECT LOGICAL_OR(val LIKE '%funding%') FROM UNNEST(cpd_prog_data.issue_type || cpd_prog_data.tags) AS val) THEN 'ECTE - Funding'
      WHEN (SELECT LOGICAL_OR(val LIKE '%npq%') FROM UNNEST(cpd_prog_data.issue_type || cpd_prog_data.tags) AS val) THEN 'CPD - NPQ'
      WHEN (SELECT LOGICAL_OR(val LIKE ANY ('%cpd%', 'fip%', 'ect%', '%ecte%', '%induction%', '%appropriate%', 'ab-%')) FROM UNNEST(cpd_prog_data.issue_type || cpd_prog_data.tags) AS val) THEN 'CPD - ECTE'
      WHEN (SELECT LOGICAL_OR(STARTS_WITH(val, 'ecf') OR STARTS_WITH(val, 'ecte')) FROM UNNEST(cpd_prog_data.issue_type || cpd_prog_data.tags) AS val ) THEN 'CPD - ECTE'    
      WHEN LOWER(service_name) = 'ecf'
        OR LOWER(service_name) = 'ecte' THEN 'CPD - ECTE'
      WHEN LOWER(service_name) = 'npq' THEN 'CPD - NPQ'

      -- Second classification layer: uses the group_name to assign classification
      WHEN cpd_prog_data.group_name IN ('CPD - ECTE', 'CPD - 2nd Line- LP and DP Queries', 'CPD - 2nd Line: Appropriate Bodies & Regs', 'CPD - 2nd line - Withdrawing or reinstating ECTs/mentors', 'CPD - 3rd Line Support (Dfe admin)', 'CPD - ECF', 'CPD - ECF - Access to DfE service', 'CPD - ECF - ECT registration issues', 'CPD - ECF - Mentor registration issues', 'CPD - ECF - Partnerships', 'CPD - 2nd line ECF review (policy)', 'CPD - 2nd line- Unable to change cohort due to declaration errors on the service') THEN 'CPD - ECTE'
      WHEN cpd_prog_data.group_name IN ('CPD - ECF - 2nd line Funding Enquiries',
      'CPD - ECF Funding',
      'CPD - ECTE Funding') THEN 'ECTE - Funding'
      WHEN cpd_prog_data.group_name = 'CPD - Get a TRN' THEN 'NPQ - Get a TRN'
      WHEN cpd_prog_data.group_name IN ('CPD - Induction and AB',
      'CPD - Legacy Induction') THEN 'ECTE - Induction and AB'
      WHEN cpd_prog_data.group_name IN ('CPD - 2nd Line - NPQ Digital', 'CPD - 2nd Line NPQ Policy Provider Engagement', 'CPD - 2nd line - NQTplus1 overpayments', 'CPD - 3rd Line - NPQ Digital - Developer to action', 'CPD - NPQ', 'CPD - NPQ - General Enquiries', 'CPD - 2nd Line-NPQ TSF') THEN 'CPD - NPQ'
      WHEN cpd_prog_data.group_name = 'CPD - 2nd line - NPQ Funding' THEN 'NPQ - Funding'
      WHEN cpd_prog_data.group_name = 'CPD - Triage' THEN 'CPD - Triage'
      
      -- Third classification layer: uses the migrated subject from a data extract provided by Shaun Osborne and Declan Fisher. This extract contains the original ticket_id and the ticket_id after migration as well as the subject
      WHEN subject LIKE '%npq%' THEN 'CPD - NPQ'
      WHEN subject LIKE '%induction_and_ab%' THEN 'ECTE - Induction and AB'
      WHEN subject LIKE ANY ('%ecf%',
      '% ect%',
      'ect%',
      '%induction%',
      '%ecte%',
      '%cpd%',
      '%continuous professional development%',
      '% fip %',
      '%early career%',
      '%mentor%') THEN 'CPD - ECTE'
      ELSE 'Unclassifiable - bad data'
  END
    AS classification,
  themes.support_ticket_theme
  FROM
    cpd_prog_data
  LEFT JOIN ${ref('support_ticket_issue_type_to_theme_mapping')} as themes
  ON cpd_prog_data.issue_type[SAFE_OFFSET(0)] = themes.issue_type )
SELECT
  classified_tickets.*,
  CASE
    WHEN classified_tickets.classification IN ('CPD - ECTE', 'ECTE - Induction and AB', 'ECTE - Funding') THEN 'ECTE'
    WHEN classified_tickets.classification IN ('CPD - NPQ',
    'NPQ - Funding',
    'NPQ - Get a TRN') THEN 'NPQ'
    WHEN classified_tickets.classification IN ('CPD - Triage') THEN 'Triage'
    ELSE NULL
END
  AS programme_type,
  duplicate_tickets.is_duplicate
FROM
  classification_logic AS classified_tickets
LEFT JOIN
  duplicate_tickets AS duplicate_tickets
ON
  classified_tickets.ticket_id = duplicate_tickets.ticket_id
